import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import subprocess
import threading
import os
import socket
import sys
import webbrowser
import signal
import platform
import queue
import zipfile
from datetime import datetime
import shutil
import tkinter.font as tkfont
import ctypes

# --- KONFIGURACJA DPI DLA WINDOWS ---

# Ustawienie ≈õwiadomo≈õci DPI dla system√≥w Windows, aby interfejs by≈Ç ostry
# na monitorach o wysokiej rozdzielczo≈õci (4K, wysokie DPI).
if platform.system() == "Windows":
    try:  # Windows ‚â• 8.1
        ctypes.windll.shcore.SetProcessDpiAwareness(2)  # PER_MONITOR_AWARE_V2
    except (AttributeError, OSError):  # Windows 7 lub brak modu≈Çu
        try:
            ctypes.windll.user32.SetProcessDPIAware()
        except:
            pass

# --- KONFIGURACJA ≈öCIE≈ªEK PROJEKTU ---

# Definicje kluczowych ≈õcie≈ºek w strukturze projektu.
# BASE_DIR to katalog g≈Ç√≥wny projektu (jeden poziom wy≈ºej od tools/).
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# ≈öcie≈ºka do folderu z kopiami zapasowymi.
BACKUP_FOLDER = os.path.join(BASE_DIR, "backup")

# ≈öcie≈ºka do katalogu backend z serwerem Flask.
BACKEND_DIR = os.path.join(BASE_DIR, "backend")

# ≈öcie≈ºka do katalogu z narzƒôdziami deweloperskimi.
TOOLS_DIR = os.path.join(BASE_DIR, "tools")

# ≈öcie≈ºka do katalogu z zasobami projektu.
ASSETS_FOLDER = os.path.join(BASE_DIR, "assets")

# ≈öcie≈ºka do folderu ze skanami protoko≈Ç√≥w.
PROTOKOLY_FOLDER = os.path.join(ASSETS_FOLDER, "protokoly")

# --- KONFIGURACJA PLIK√ìW DANYCH ---

# Konfiguracja plik√≥w danych, kt√≥re podlegajƒÖ operacjom importu/eksportu i tworzenia kopii zapasowych.
# Ka≈ºdy wpis definiuje ≈õcie≈ºkƒô do pliku, jego czytelnƒÖ nazwƒô oraz ewentualne pliki powiƒÖzane.
DATA_FILES = {
    "owners": {
        "path": os.path.join(BACKUP_FOLDER, "owner_data_to_import.json"),
        "name": "W≈Ça≈õciciele i Demografia",
        "related": [os.path.join(BACKUP_FOLDER, "demografia.json")],
    },
    "parcels": {
        "path": os.path.join(BACKUP_FOLDER, "parcels_data.json"),
        "name": "Dzia≈Çki (Geometria)",
        "related": [],
    },
    "genealogy": {
        "path": os.path.join(BACKUP_FOLDER, "genealogia.json"),
        "name": "Genealogia",
        "related": [],
    },
}

# --- KONFIGURACJA ADRES√ìW URL ---

# S≈Çownik przechowujƒÖcy adresy URL do kluczowych widok√≥w aplikacji webowej.
URLS = {
    "strona_glowna": "http://127.0.0.1:5000/strona_glowna/index.html",
    "mapa": "http://127.0.0.1:5000/mapa/mapa.html",
    "admin": "http://127.0.0.1:5000/admin",
    "genealogy_editor": "http://127.0.0.1:5001/",
}

# --- KONFIGURACJA SKRYPT√ìW ---

# S≈Çownik konfiguracyjny dla skrypt√≥w zewnƒôtrznych uruchamianych przez launcher.
# 'path' to ≈õcie≈ºka do pliku, a 'cwd' to katalog roboczy, w kt√≥rym skrypt powinien byƒá uruchomiony.
SCRIPTS = {
    "backend": {
        "path": os.path.join(BACKEND_DIR, "app.py"), 
        "cwd": BACKEND_DIR
    },
    "migration": {
        "path": os.path.join(BACKEND_DIR, "migrate_data.py"),
        "cwd": BACKEND_DIR,
    },
    "tests": {
        "path": "-m",
        "args": ["pytest", "tests", "-q"],   
        "cwd": BACKEND_DIR,
    },
    "owner_editor": {
        "path": os.path.join(TOOLS_DIR, "owner_editor.py"),
        "cwd": TOOLS_DIR,
    },
    "parcel_editor": {
        "path": os.path.join(TOOLS_DIR, "parcel_editor", "parcel_editor_app.py"),
        "cwd": os.path.join(TOOLS_DIR, "parcel_editor"),
    },
    "genealogy_editor": {
        "path": os.path.join(TOOLS_DIR, "genealogy_editor", "editor_app.py"),
        "cwd": os.path.join(TOOLS_DIR, "genealogy_editor"),
    },
}


# --- STA≈ÅE STYLIZACJI INTERFEJSU ---

# Definicje kolor√≥w dla przycisk√≥w i element√≥w interfejsu
COLORS = {
    'primary': '#0d6efd',    # Niebieski
    'success': '#198754',    # Zielony 
    'danger': '#dc3545',     # Czerwony
    'warning': '#ffc107',    # ≈ª√≥≈Çty
    'info': '#0dcaf0',       # Jasnoniebieski
    'secondary': '#6c757d',  # Szary
    'dark': '#212529',       # Ciemnoszary
    'light': '#f8f9fa',      # Jasnoszary
}

# --- FUNKCJE POMOCNICZE SIECIOWE ---

def get_local_ip():
    """
    Pobiera lokalny adres IP komputera w sieci.
    Zwraca localhost je≈õli nie mo≈ºe okre≈õliƒá IP.
    """
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except:
        return "127.0.0.1"

# --- FUNKCJE ZARZƒÑDZANIA KONFIGURACJƒÑ ---

def check_env_configuration():
    """
    Sprawdza i konfiguruje plik .env dla backendu.
    Tworzy plik .env je≈õli nie istnieje, kopiujƒÖc z .env.example.
    """
    env_path = os.path.join(BACKEND_DIR, ".env")
    env_example_path = os.path.join(BACKEND_DIR, ".env.example")
    
    # Je≈õli .env nie istnieje, spr√≥buj utworzyƒá z przyk≈Çadu
    if not os.path.exists(env_path):
        if os.path.exists(env_example_path):
            try:
                shutil.copy(env_example_path, env_path)
                print("‚úÖ Utworzono plik .env z przyk≈Çadowej konfiguracji")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è Nie mo≈ºna utworzyƒá pliku .env: {e}")
                return False
        else:
            # Utw√≥rz podstawowy plik .env
            try:
                default_env_content = """# --- KONFIGURACJA BAZY DANYCH POSTGRESQL ---
DB_HOST=localhost
DB_NAME=mapa_czarna_db
DB_USER=postgres
DB_PASSWORD=1234
DB_PORT=5432

# --- KONFIGURACJA SERWERA FLASK ---
FLASK_HOST=127.0.0.1
FLASK_PORT=5000
FLASK_DEBUG=True
FLASK_SECRET_KEY=change-me-once

# --- ADMIN / BEZPIECZE≈ÉSTWO ---
ADMIN_AUTH_ENABLED=0
ADMIN_USERNAME=admin
ADMIN_PASSWORD_HASH=
"""
                with open(env_path, 'w', encoding='utf-8') as f:
                    f.write(default_env_content)
                print("‚úÖ Utworzono domy≈õlny plik .env")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è Nie mo≈ºna utworzyƒá pliku .env: {e}")
                return False
    return True

def get_flask_config():
    """
    Odczytuje konfiguracjƒô Flask z pliku .env.
    Zwraca s≈Çownik z host i port.
    """
    env_path = os.path.join(BACKEND_DIR, ".env")
    config = {
        'host': '127.0.0.1',
        'port': '5000'
    }
    
    if os.path.exists(env_path):
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip()
                        if key == 'FLASK_HOST':
                            config['host'] = value
                        elif key == 'FLASK_PORT':
                            config['port'] = value
        except:
            pass
    
    return config
        
# --- G≈Å√ìWNA KLASA APLIKACJI ---

class AppLauncher(tk.Tk):
    """
    G≈Ç√≥wna klasa aplikacji launchera.
    ZarzƒÖdza uruchamianiem i monitorowaniem wszystkich komponent√≥w projektu
    oraz zapewnia interfejs graficzny do kontroli proces√≥w.
    """

    def __init__(self):
        """Inicjalizacja g≈Ç√≥wnego okna aplikacji i wszystkich komponent√≥w."""
        super().__init__()
        
        # --- KONFIGURACJA OKNA G≈Å√ìWNEGO ---
        
        self.title("üó∫Ô∏è Centrum ZarzƒÖdzania - System Mapy Katastralnej")
        
        # Automatyczne dostosowanie do rozmiaru ekranu i DPI
        self.setup_window_geometry()

        # --- INICJALIZACJA ZMIENNYCH STANU ---
        
        # S≈Çownik do przechowywania informacji o uruchomionych procesach.
        self.managed_processes = {}
        
        # Kolejka do bezpiecznej komunikacji miƒôdzy wƒÖtkami a g≈Ç√≥wnym wƒÖtkiem GUI.
        self.event_queue = queue.Queue()

        # --- KONFIGURACJA STYL√ìW I CZCIONEK ---
        
        self.setup_styles()
        
        # --- SPRAWDZENIE KONFIGURACJI ---
        
        # Upewnienie siƒô, ≈ºe plik .env istnieje przed uruchomieniem
        check_env_configuration()

        # --- UTWORZENIE INTERFEJSU ---
        
        self.create_widgets()

        # Snapshot ostatniego znanego portu z pliku .env.
        # U≈ºywany do wykrywania zmian konfiguracji (np. zmiana FLASK_PORT),
        # aby m√≥c zaproponowaƒá automatyczny restart serwera backend.
        self._last_port = self.load_flask_config().get("port")
        # --- KONFIGURACJA ZDARZE≈É ---
        
        # Obs≈Çuga zamykania okna
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        # Uruchomienie cyklicznego sprawdzania kolejki zdarze≈Ñ.
        self.process_queue()

    def setup_window_geometry(self):
        """
        Inteligentnie dostosowuje rozmiar okna do ekranu i DPI.
        Obs≈Çuguje r√≥≈ºne rozdzielczo≈õci od HD do 4K.
        """
        # Pobranie rzeczywistych wymiar√≥w ekranu
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        # Pobranie DPI i obliczenie skali
        dpi = self.winfo_fpixels("1i")
        scale_factor = dpi / 96  # 96 DPI to standard (100% w Windows)
        
        # Okre≈õlenie typu ekranu na podstawie rozdzielczo≈õci
        if screen_width <= 1920:  # HD/Full HD
            window_width = min(int(screen_width * 0.85), 1400)
            window_height = min(int(screen_height * 0.85), 850)
        elif screen_width <= 2560:  # 2K/QHD
            window_width = min(int(screen_width * 0.75), 1600)
            window_height = min(int(screen_height * 0.80), 900)
        else:  # 4K i wiƒôksze
            window_width = min(int(screen_width * 0.65), 1800)
            window_height = min(int(screen_height * 0.75), 1000)
        
        # Dostosowanie do skalowania systemu
        if scale_factor > 1.25:  # Wysokie DPI (125% i wiƒôcej)
            window_width = int(window_width / scale_factor * 1.2)
            window_height = int(window_height / scale_factor * 1.2)
        
        # Minimalne rozmiary
        min_width = max(1000, int(900 * scale_factor))
        min_height = max(700, int(650 * scale_factor))
        
        # Upewnienie siƒô, ≈ºe okno nie jest za ma≈Çe
        window_width = max(window_width, min_width)
        window_height = max(window_height, min_height)
        
        # Wycentrowanie okna
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        # Ustawienie geometrii
        self.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.minsize(min_width, min_height)
        
        # Zapisanie informacji o skalowaniu dla p√≥≈∫niejszego u≈ºycia
        self.scale_factor = scale_factor
        self.is_high_dpi = scale_factor > 1.25

    def center_window(self):
        """Centruje okno aplikacji na ekranie."""
        self.update_idletasks()
        
        # Pobranie wymiar√≥w ekranu
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        # Pobranie wymiar√≥w okna - zwiƒôkszone
        window_width = 1400
        window_height = 900
        
        # Obliczenie pozycji
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        self.geometry(f"{window_width}x{window_height}+{x}+{y}")

    def setup_styles(self):
        """
        Konfiguruje style i czcionki dla ca≈Çej aplikacji.
        Automatycznie dostosowuje do DPI monitora.
        """
        
        # --- SKALOWANIE DPI ---
        
        # Pobranie skali DPI
        dpi = self.winfo_fpixels("1i")
        scale = dpi / 96
        
        # Ustawienie skalowania Tkinter
        self.tk.call("tk", "scaling", scale)
        
        # --- KONFIGURACJA CZCIONEK ---
        
        # Inteligentne obliczenie rozmiaru czcionki
        if scale <= 1.0:  # Standardowe DPI
            base_size = 10
        elif scale <= 1.25:  # 125% skalowanie
            base_size = 10
        elif scale <= 1.5:  # 150% skalowanie
            base_size = 11
        else:  # Wy≈ºsze skalowanie
            base_size = 12
        
        # Aktualizacja domy≈õlnej czcionki
        default_font = tkfont.nametofont("TkDefaultFont")
        default_font.configure(family="Segoe UI", size=base_size)
        
        # --- KONFIGURACJA STYL√ìW TTK ---
        
        self.style = ttk.Style(self)
        self.style.theme_use("clam")
        
        # Dostosowany padding dla przycisk√≥w
        button_padding = int(6 * scale) if scale > 1.25 else 8
        
        # Style dla przycisk√≥w
        self.style.configure(
            "TButton", 
            padding=button_padding,
            relief="flat", 
            font=("Segoe UI", base_size)
        )
        
        # Kolory przycisk√≥w (bez zmian)
        self.style.configure("Primary.TButton", foreground="white", background=COLORS['primary'])
        self.style.map("Primary.TButton", background=[('active', '#0b5ed7'), ('pressed', '#0a58ca')])
        
        self.style.configure("Success.TButton", foreground="white", background=COLORS['success'])
        self.style.map("Success.TButton", background=[('active', '#157347'), ('pressed', '#146c43')])
        
        self.style.configure("Danger.TButton", foreground="white", background=COLORS['danger'])
        self.style.map("Danger.TButton", background=[('active', '#bb2d3b'), ('pressed', '#b02a37')])
        
        self.style.configure("Info.TButton", foreground="white", background=COLORS['info'])
        self.style.map("Info.TButton", background=[('active', '#06b6d4'), ('pressed', '#0891b2')])
        
        self.style.configure("Warning.TButton", foreground="black", background=COLORS['warning'])
        self.style.map("Warning.TButton", background=[('active', '#ffca2c'), ('pressed', '#ffc720')])
        
        # Styl dla link√≥w
        self.style.configure("Link.TLabel", foreground=COLORS['primary'], font=("Segoe UI", base_size, "underline"))
        
        # Styl dla nag≈Ç√≥wk√≥w
        self.style.configure("Heading.TLabel", font=("Segoe UI", base_size + 2, "bold"))
        
        # Konfiguracja wysoko≈õci wierszy Treeview
        row_height = int(base_size * 2.2)
        self.style.configure("Treeview", rowheight=row_height, font=("Segoe UI", base_size))
        self.style.configure("Treeview.Heading", font=("Segoe UI", base_size, "bold"))
        
        # Zapisanie rozmiaru bazowego
        self.base_font_size = base_size

    def create_console_widget(self, parent):
        """
        Tworzy widget konsoli z ciemnym motywem i odpowiednim rozmiarem czcionki.
        
        Args:
            parent: Widget rodzica dla konsoli
            
        Returns:
            scrolledtext.ScrolledText: Widget konsoli
        """
        # U≈ºycie zapisanego rozmiaru czcionki
        console_font_size = self.base_font_size
        
        console = scrolledtext.ScrolledText(
            parent, 
            wrap=tk.WORD, 
            bg="#1e1e1e",
            fg="#e0e0e0",
            font=("Consolas", console_font_size),
            insertbackground="#ffffff",
            selectbackground="#3a3a3a",
            selectforeground="#ffffff",
            height=10  # Sta≈Ça minimalna wysoko≈õƒá
        )
        console.pack(fill=tk.BOTH, expand=True)
        console.configure(state="disabled")
        return console

    def process_queue(self):
        """
        Przetwarza zdarzenia z kolejki w pƒôtli g≈Ç√≥wnej Tkinter.
        Zapewnia bezpiecznƒÖ komunikacjƒô miƒôdzy wƒÖtkami a GUI.
        """
        try:
            # Pƒôtla odczytuje wszystkie oczekujƒÖce zdarzenia.
            while True:
                key, event_type = self.event_queue.get_nowait()
                if event_type == "finished":
                    self.handle_process_finished(key)
        except queue.Empty:
            # Kolejka jest pusta, nic wiƒôcej do zrobienia w tym cyklu.
            pass
        finally:
            # Ponowne wywo≈Çanie funkcji po 100ms, tworzƒÖc pƒôtlƒô.
            self.after(100, self.process_queue)

    def handle_process_finished(self, key):
        """
        Obs≈Çuguje zdarzenie zako≈Ñczenia procesu potomnego.
        Aktualizuje interfejs i czy≈õci zasoby zwiƒÖzane z procesem.
        
        Args:
            key: Identyfikator zako≈Ñczonego procesu
        """
        if key in self.managed_processes:
            info = self.managed_processes[key]
            name = info["name"]
            
            # Logowanie informacji o zako≈Ñczeniu
            msg_finished = f"--- Proces '{name}' zako≈Ñczy≈Ç dzia≈Çanie ---\n"
            self.log(msg_finished, console=info["console"])
            self.log(msg_finished)

            # Usuniƒôcie zak≈Çadki z konsolƒÖ i wpisu z listy proces√≥w.
            self.notebook.forget(info["tab_frame"])
            del self.managed_processes[key]
            self.update_processes_ui()

            # Specjalna obs≈Çuga dla serwera backend
            if key == "backend":
                # Przywr√≥ƒá etykiety przycisk√≥w
                self.server_btn.config(
                    text="üöÄ Uruchom Serwer Backend", 
                    style="Success.TButton"
                )
                self.network_server_btn.config(
                    text="üåê Uruchom Serwer Sieciowy",
                    style="Info.TButton"
                )
                # Je≈õli to by≈Ç tryb sieciowy ‚Äì poka≈º podpowied≈∫
                if info.get("network_mode"):
                    messagebox.showwarning(
                        "Serwer sieciowy siƒô wy≈ÇƒÖczy≈Ç",
                        "Proces zako≈Ñczy≈Ç siƒô niespodziewanie.\n\n"
                        "Najczƒôstsza przyczyna: b≈ÇƒÖd w pliku _network_server_wrapper.py.\n"
                        "Po aktualizacji launchera spr√≥buj ponownie.\n\n"
                        "Diagnostyka: uruchom rƒôcznie w folderze backend:\n"
                        "python _network_server_wrapper.py"
                    )

    def create_widgets(self):
        """
        Tworzy kompletny interfejs u≈ºytkownika aplikacji.
        U≈ºywa elastycznego uk≈Çadu dostosowanego do r√≥≈ºnych rozmiar√≥w ekranu.
        """
        
        # --- G≈Å√ìWNY KONTENER ---
        
        main_frame = ttk.Frame(self, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # U≈ºywamy pack zamiast grid dla lepszej elastyczno≈õci
        
        # --- NAG≈Å√ìWEK APLIKACJI ---
        
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        title_label = ttk.Label(
            header_frame,
            text="üó∫Ô∏è System ZarzƒÖdzania MapƒÖ KatastralnƒÖ",
            style="Heading.TLabel",
            font=("Segoe UI", self.base_font_size + 4, "bold")
        )
        title_label.pack(side=tk.LEFT)
        
        status_label = ttk.Label(
            header_frame,
            text="Status: Gotowy",
            foreground=COLORS['success']
        )
        status_label.pack(side=tk.RIGHT, padx=10)

        # --- SEKCJA G≈Å√ìWNYCH OPERACJI ---
        
        operations_frame = ttk.LabelFrame(
            main_frame, 
            text="‚öôÔ∏è Operacje G≈Ç√≥wne", 
            padding="10"
        )
        operations_frame.pack(fill=tk.X, pady=5)
        
        # PIERWSZY RZƒÑD przycisk√≥w operacyjnych
        ops_buttons_row1 = ttk.Frame(operations_frame)
        ops_buttons_row1.pack(fill=tk.X, pady=(0, 5))
        
        # Przyciski pierwszego rzƒôdu - bardziej przestronne
        self.server_btn = ttk.Button(
            ops_buttons_row1,
            text="üöÄ Uruchom Serwer Backend",
            command=self.toggle_server,
            style="Success.TButton"
        )
        self.server_btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        self.network_server_btn = ttk.Button(
            ops_buttons_row1,
            text="üåê Uruchom Serwer Sieciowy",
            command=self.toggle_network_server,
            style="Info.TButton"
        )
        self.network_server_btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(
            ops_buttons_row1,
            text="üîÑ Migruj Dane do Bazy",
            command=lambda: self.run_script_in_thread(
                SCRIPTS["migration"], "Skrypt Migracyjny"
            ),
            style="Info.TButton"
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # DRUGI RZƒÑD przycisk√≥w operacyjnych
        ops_buttons_row2 = ttk.Frame(operations_frame)
        ops_buttons_row2.pack(fill=tk.X)
        
        # Przyciski drugiego rzƒôdu - teraz majƒÖ wiƒôcej miejsca
        ttk.Button(
            ops_buttons_row2,
            text="üíæ Mened≈ºer Kopii",
            command=self.open_backup_manager,
            style="Primary.TButton"
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(
            ops_buttons_row2,
            text="‚öôÔ∏è Konfiguracja DB",
            command=self.open_env_editor,
            style="Secondary.TButton"
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(
            ops_buttons_row2,
            text="üîê Ustawienia Administratora",
            command=self.open_admin_settings,
            style="Warning.TButton"
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(
            ops_buttons_row2,
            text="üõ°Ô∏è Bezpiecze≈Ñstwo",
            command=self.open_security_manager,
            style="Primary.TButton"
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # --- SEKCJA NARZƒòDZI DEWELOPERSKICH ---
        
        tools_frame = ttk.LabelFrame(
            main_frame, 
            text="üõ†Ô∏è Narzƒôdzia Deweloperskie", 
            padding="10"
        )
        tools_frame.pack(fill=tk.X, pady=5)

        # Kontener na przyciski edytor√≥w
        editors_container = ttk.Frame(tools_frame)
        editors_container.pack(fill=tk.X)
        
        # Przyciski edytor√≥w
        editor_buttons = [
            ("üë• Edytor W≈Ça≈õcicieli", "owner_editor"),
            ("üó∫Ô∏è Edytor Dzia≈Çek", "parcel_editor"),
            ("üå≥ Edytor Genealogii", "genealogy_editor"),
        ]
        
        for text, key in editor_buttons:
            btn = ttk.Button(
                editors_container,
                text=text,
                command=lambda k=key, n=text: self.start_managed_process(k, n),
                style="Primary.TButton"
            )
            btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # Przycisk do uruchamiania test√≥w jednostkowych
        ttk.Button(
            editors_container,
            text="üß™ Uruchom Testy Jednostkowe",
            command=self.run_pytest,   
            style="Info.TButton"
        ).pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # --- SEKCJA SZYBKIEGO DOSTƒòPU ---
        links_frame = ttk.LabelFrame(
            main_frame,
            text="üåê Szybki Dostƒôp (wymaga uruchomionego serwera)",
            padding="10"
        )
        links_frame.pack(fill=tk.X, pady=5)
        
        # Kontener na linki
        links_container = ttk.Frame(links_frame)
        links_container.pack(fill=tk.X)
        
        # Zapamiƒôtujemy przyciski, aby m√≥c je ‚Äûprzeprogramowaƒá" po zmianie .env
        self.quick_link_buttons = []

        # Utworzenie przycisk√≥w (na razie puste komendy ‚Äì uzupe≈Çnimy w refresh_quick_links)
        link_defs = [
            ("üè† Strona G≈Ç√≥wna", "/strona_glowna/index.html", "Success"),
            ("üó∫Ô∏è Mapa Interaktywna", "/mapa/mapa.html", "Info"),
            ("‚öôÔ∏è Panel Administracyjny", "/admin", "Warning"),
        ]
        for text, path, style in link_defs:
            btn = ttk.Button(
                links_container,
                text=text,
                style=f"{style}.TButton"
            )
            btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
            self.quick_link_buttons.append((btn, path))

        # Pierwsze od≈õwie≈ºenie link√≥w i start obserwatora .env
        self._env_mtime = None
        self.refresh_quick_links()
        self.start_env_watcher()

        # --- SEKCJA PROCES√ìW ---
        
        self.processes_frame = ttk.LabelFrame(
            main_frame, 
            text="üìä Uruchomione Procesy", 
            padding="10"
        )
        self.processes_frame.pack(fill=tk.X, pady=5)
        self.update_processes_ui()

        # --- SEKCJA KONSOL ---
        
        console_container = ttk.LabelFrame(
            main_frame, 
            text="üíª Konsole Wyj≈õciowe", 
            padding="10"
        )
        console_container.pack(fill=tk.BOTH, expand=True, pady=5)

        # Notebook z zak≈Çadkami dla konsol
        self.notebook = ttk.Notebook(console_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)

        # G≈Ç√≥wna konsola launchera
        self.main_console_frame = ttk.Frame(self.notebook)
        self.main_console = self.create_console_widget(self.main_console_frame)
        self.notebook.add(self.main_console_frame, text="üè† Launcher")
        
        # Wiadomo≈õƒá powitalna
        self.log("=" * 60 + "\n")
        self.log("üó∫Ô∏è System ZarzƒÖdzania MapƒÖ KatastralnƒÖ - Uruchomiony\n")
        self.log("=" * 60 + "\n")
        self.log("‚ÑπÔ∏è Witaj w centrum zarzƒÖdzania projektem!\n")
        self.log("‚ÑπÔ∏è U≈ºyj przycisk√≥w powy≈ºej, aby uruchomiƒá komponenty.\n\n")

    def log(self, message, console=None):
        """
        Wypisuje wiadomo≈õƒá do okre≈õlonej konsoli.
        
        Args:
            message: Tekst do wy≈õwietlenia
            console: Widget konsoli (domy≈õlnie g≈Ç√≥wna konsola)
        """
        target_console = console or self.main_console
        target_console.configure(state="normal")
        target_console.insert(tk.END, message)
        target_console.see(tk.END)
        target_console.configure(state="disabled")

    def update_processes_ui(self):
        """
        Od≈õwie≈ºa listƒô uruchomionych proces√≥w w interfejsie.
        Wy≈õwietla procesy z informacjami o PID i przyciskami akcji.
        """
        # Czyszczenie obecnej listy
        for widget in self.processes_frame.winfo_children():
            widget.destroy()

        if not self.managed_processes:
            # Komunikat gdy brak proces√≥w
            empty_label = ttk.Label(
                self.processes_frame, 
                text="üì≠ Brak uruchomionych proces√≥w",
                foreground=COLORS['secondary']
            )
            empty_label.pack(pady=10)
            return

        # Tworzenie listy proces√≥w
        for key, info in self.managed_processes.items():
            proc_frame = ttk.Frame(self.processes_frame)
            proc_frame.pack(fill=tk.X, pady=3, padx=5)
            
            # Ikona statusu i informacje o procesie
            status_text = f"üü¢ {info['name']} (PID: {info['process'].pid})"
            ttk.Label(
                proc_frame, 
                text=status_text,
                font=("Segoe UI", 10)
            ).pack(side=tk.LEFT)
            
            # Przycisk zatrzymania procesu
            ttk.Button(
                proc_frame,
                text="‚èπÔ∏è Zatrzymaj",
                style="Danger.TButton",
                command=lambda k=key: self.stop_managed_process(k),
                width=12
            ).pack(side=tk.RIGHT, padx=5)

    def load_flask_config(self):
        """Czyta aktualny host/port z backend/.env."""
        cfg = get_flask_config()
        # sanity ‚Äì port jako int/string
        try:
            cfg['port'] = str(int(cfg.get('port', '5000')))
        except:
            cfg['port'] = '5000'
        cfg['host'] = cfg.get('host', '127.0.0.1')
        return cfg

    def refresh_quick_links(self):
        """Aktualizuje komendy przycisk√≥w Szybkiego Dostƒôpu na podstawie .env."""
        self.current_flask_config = self.load_flask_config()
        base_url = f"http://{self.current_flask_config['host']}:{self.current_flask_config['port']}"
        for btn, path in getattr(self, "quick_link_buttons", []):
            url = base_url + path
            btn.configure(command=lambda u=url: webbrowser.open_new_tab(u))

    def get_env_mtime(self):
        """Zwraca mtime pliku backend/.env (albo None)."""
        env_path = os.path.join(BACKEND_DIR, ".env")
        try:
            return os.path.getmtime(env_path)
        except OSError:
            return None

    def start_env_watcher(self):
        """Cyklicznie sprawdza, czy .env siƒô zmieni≈Ç, i reaguje."""
        def _tick():
            try:
                mtime = self.get_env_mtime()
                if self._env_mtime is None:
                    self._env_mtime = mtime
                elif mtime is not None and mtime != self._env_mtime:
                    self._env_mtime = mtime
                    self.on_env_changed()
            finally:
                # sprawdzaj co 2000 ms
                self.after(2000, _tick)
        _tick()

    def on_env_changed(self):
        """Reakcja na zmianƒô .env: od≈õwie≈º linki i (opcjonalnie) restart backendu."""
        # snapshot ‚Äûstarego‚Äù portu i trybu zanim od≈õwie≈ºymy linki
        old_port = getattr(self, "_last_port", None)
        was_running = "backend" in self.managed_processes
        was_network = self.managed_processes.get("backend", {}).get("network_mode", False)

        # odczytaj nowƒÖ konfiguracjƒô + podmie≈Ñ komendy przycisk√≥w
        self.refresh_quick_links()
        new_port = self.current_flask_config.get("port")
        self._last_port = new_port  # zaktualizuj snapshot

        self.log(f"üîé Wykryto zmianƒô .env ‚Äì port {old_port} ‚ûú {new_port}\n")

        # je≈õli backend nie dzia≈Ça, tylko zaktualizowali≈õmy linki
        if not was_running or not old_port or not new_port or old_port == new_port:
            return

        # zapytaƒá o restart
        if messagebox.askyesno(
            "Wykryto zmianƒô portu",
            f"Zmieniono port z {old_port} na {new_port}.\n\n"
            "Zrestartowaƒá serwer backend, aby zastosowaƒá nowy port?"
        ):
            # 1) zatrzymaj
            self.stop_managed_process("backend")

            # 2) przygotuj firewall dla nowego portu (Windows) ‚Äì tylko sieciowy ma znaczenie
            try:
                self.setup_firewall_rule_for_port(int(new_port))
            except Exception:
                pass

            # 3) wystartuj ponownie w tym samym trybie, z lekkim op√≥≈∫nieniem
            def _restart():
                if was_network:
                    self.start_network_server()   # wr√≥ƒá do trybu LAN
                else:
                    self.start_managed_process("backend", "Serwer Backend (Lokalny)")
                    self.server_btn.config(text="‚èπÔ∏è Zatrzymaj Serwer (Lokalny)", style="Danger.TButton")

            # daj OS 400‚Äì600 ms na domkniƒôcie procesu i zwolnienie portu
            self.after(600, _restart)

    def setup_firewall_rule_for_port(self, port: int):
        """Wariant regu≈Çy zapory podany konkretnym portem (u≈ºywane przy hot‚Äëchange)."""
        if platform.system() != "Windows":
            return
        rule_name = f"Flask Server Port {port}"
        check_cmd = f'netsh advfirewall firewall show rule name="{rule_name}"'
        result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            return  # ju≈º jest
        add_cmd = (
            'netsh advfirewall firewall add rule '
            f'name="{rule_name}" dir=in action=allow protocol=TCP localport={port} enable=yes profile=any'
        )
        subprocess.run(add_cmd, shell=True)

    def open_backup_manager(self):
        """
        Otwiera okno mened≈ºera kopii zapasowych.
        Sprawdza czy nie ma konflikt√≥w z otwartymi edytorami.
        """
        # Sprawdzenie otwartych edytor√≥w
        if any(key.endswith("_editor") for key in self.managed_processes):
            messagebox.showwarning(
                "‚ö†Ô∏è Uwaga",
                "Zamknij wszystkie aktywne edytory przed zarzƒÖdzaniem kopiami zapasowymi,\n"
                "aby uniknƒÖƒá konflikt√≥w plik√≥w.",
                icon="warning"
            )
            return
        
        # Utworzenie i wy≈õwietlenie okna mened≈ºera
        manager = BackupManager(self)
        self.wait_window(manager)

    def open_env_editor(self):
        """
        Otwiera edytor konfiguracji .env w osobnym oknie.
        Pozwala na ≈ÇatwƒÖ edycjƒô parametr√≥w po≈ÇƒÖczenia z bazƒÖ danych.
        """
        env_path = os.path.join(BACKEND_DIR, ".env")
        
        # Sprawd≈∫ czy plik istnieje
        if not os.path.exists(env_path):
            if not check_env_configuration():
                messagebox.showerror(
                    "‚ùå B≈ÇƒÖd",
                    "Nie mo≈ºna utworzyƒá pliku konfiguracyjnego .env"
                )
                return
        
        # Okno edytora
        editor_window = tk.Toplevel(self)
        # ustal minimalny rozmiar po za≈Çadowaniu
        editor_window.update_idletasks()
        w, h = 700, 500
        parent_x = self.winfo_rootx()
        parent_y = self.winfo_rooty()
        parent_w = self.winfo_width()
        parent_h = self.winfo_height()
        x = parent_x + (parent_w - w) // 2
        y = parent_y + (parent_h - h) // 2
        editor_window.geometry(f"{w}x{h}+{x}+{y}")
        editor_window.minsize(600, 420)
        editor_window.title("‚öôÔ∏è Edytor Konfiguracji Bazy Danych")
        editor_window.geometry("700x500")
        
        # G≈Ç√≥wna ramka
        main_frame = ttk.Frame(editor_window, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Nag≈Ç√≥wek
        ttk.Label(
            main_frame,
            text="üìù Edycja pliku konfiguracyjnego .env",
            font=("Segoe UI", 12, "bold")
        ).pack(pady=(0, 10))
        
        # Informacja
        info_text = (
            "Ten plik zawiera konfiguracjƒô po≈ÇƒÖczenia z bazƒÖ danych PostgreSQL.\n"
            "Po wprowadzeniu zmian zapisz plik i zrestartuj serwer backend."
        )
        ttk.Label(
            main_frame,
            text=info_text,
            wraplength=650,
            foreground="#666666"
        ).pack(pady=(0, 10))
        
        # Edytor tekstu
        text_frame = ttk.Frame(main_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        text_editor = scrolledtext.ScrolledText(
            text_frame,
            wrap=tk.WORD,
            font=("Consolas", 10),
            height=15
        )
        text_editor.pack(fill=tk.BOTH, expand=True)
        
        # Wczytaj zawarto≈õƒá pliku
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                content = f.read()
                text_editor.insert('1.0', content)
        except Exception as e:
            messagebox.showerror(
                "‚ùå B≈ÇƒÖd",
                f"Nie mo≈ºna wczytaƒá pliku .env:\n{e}",
                parent=editor_window
            )
            editor_window.destroy()
            return
        
        # Przyciski
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(10, 0))
        
        def save_env():
            """Zapisuje zmiany do pliku .env"""
            try:
                content = text_editor.get('1.0', 'end-1c')
                with open(env_path, 'w', encoding='utf-8') as f:
                    f.write(content)

                # natychmiastowe od≈õwie≈ºenie link√≥w (watcher i tak to wykryje, ale bƒôdzie szybciej)
                self.on_env_changed()

                messagebox.showinfo(
                    "‚úÖ Sukces",
                    "Konfiguracja zosta≈Ça zapisana.\n"
                    "Je≈õli zmieni≈Çe≈õ port ‚Äì pojawi siƒô pytanie o restart serwera.",
                    parent=editor_window
                )
            except Exception as e:
                messagebox.showerror(
                    "‚ùå B≈ÇƒÖd",
                    f"Nie mo≈ºna zapisaƒá pliku:\n{e}",
                    parent=editor_window
                )
        
        def reset_defaults():
            """Przywraca domy≈õlnƒÖ konfiguracjƒô"""
            if messagebox.askyesno(
                "‚ö†Ô∏è Potwierdzenie",
                "Czy na pewno chcesz przywr√≥ciƒá domy≈õlnƒÖ konfiguracjƒô?",
                parent=editor_window
            ):
                default_content = """# --- KONFIGURACJA BAZY DANYCH POSTGRESQL ---
DB_HOST=localhost
DB_NAME=mapa_czarna_db
DB_USER=postgres
DB_PASSWORD=1234
DB_PORT=5432

# --- KONFIGURACJA SERWERA FLASK ---
FLASK_HOST=127.0.0.1
FLASK_PORT=5000
FLASK_DEBUG=True
"""
                text_editor.delete('1.0', tk.END)
                text_editor.insert('1.0', default_content)
        
        ttk.Button(
            button_frame,
            text="üíæ Zapisz zmiany",
            command=save_env,
            style="Success.TButton"
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            button_frame,
            text="üîÑ Przywr√≥ƒá domy≈õlne",
            command=reset_defaults,
            style="Warning.TButton"
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            button_frame,
            text="‚ùå Zamknij",
            command=editor_window.destroy,
            style="Secondary.TButton"
        ).pack(side=tk.RIGHT, padx=5)

    def open_admin_settings(self):
        """Okno do w≈ÇƒÖczania/wy≈ÇƒÖczania logowania admina i ustawiania has≈Ça."""
        import re
        from tkinter import StringVar, BooleanVar
        try:
            from werkzeug.security import generate_password_hash
        except Exception:
            messagebox.showerror("Brak zale≈ºno≈õci", "Brakuje pakietu Werkzeug (instalowany z Flask).")
            return

        env_path = os.path.join(BACKEND_DIR, ".env")
        if not os.path.exists(env_path):
            if not check_env_configuration():
                messagebox.showerror("‚ùå B≈ÇƒÖd", "Nie mo≈ºna utworzyƒá pliku .env")
                return

        # Wczytaj istniejƒÖce warto≈õci
        env = {}
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line=line.strip()
                if line and not line.startswith('#') and '=' in line:
                    k,v = line.split('=',1)
                    env[k.strip()] = v.strip()

        enabled = BooleanVar(value=(env.get('ADMIN_AUTH_ENABLED','0') == '1'))
        username = StringVar(value=env.get('ADMIN_USERNAME','admin'))
        # has≈Ça nie pokazujemy ‚Äì tylko pole do wpisania nowego (opcjonalnie)
        password = StringVar(value='')

        win = tk.Toplevel(self)
        win.title("üîê Ustawienia Administratora")
        win.transient(self)
        win.grab_set()
        
        # --- WYCENTROWANIE OKNA ---
        # Najpierw ustawiamy minimalny rozmiar
        win.minsize(460, 260)
        
        # Czekamy na aktualizacjƒô rozmiaru okna
        win.update_idletasks()
        
        # Ustawiamy rozmiar okna
        window_width = 500
        window_height = 300
        
        # Pobieramy pozycjƒô i rozmiar okna rodzica (g≈Ç√≥wnego okna aplikacji)
        parent_x = self.winfo_rootx()
        parent_y = self.winfo_rooty()
        parent_width = self.winfo_width()
        parent_height = self.winfo_height()
        
        # Obliczamy pozycjƒô dla wycentrowania wzglƒôdem okna rodzica
        x = parent_x + (parent_width - window_width) // 2
        y = parent_y + (parent_height - window_height) // 2
        
        # Ustawiamy geometriƒô (rozmiar + pozycja)
        win.geometry(f"{window_width}x{window_height}+{x}+{y}")

        frm = ttk.Frame(win, padding=12)
        frm.pack(fill=tk.BOTH, expand=True)

        ttk.Checkbutton(frm, text="W≈ÇƒÖcz wymaganie logowania do Panelu Admina",
                        variable=enabled).pack(anchor=tk.W, pady=(0,8))

        row1 = ttk.Frame(frm); row1.pack(fill=tk.X, pady=4)
        ttk.Label(row1, text="Login administratora:", width=22).pack(side=tk.LEFT)
        ttk.Entry(row1, textvariable=username).pack(side=tk.LEFT, fill=tk.X, expand=True)

        row2 = ttk.Frame(frm); row2.pack(fill=tk.X, pady=4)
        ttk.Label(row2, text="Nowe has≈Ço (opcjonalnie):", width=22).pack(side=tk.LEFT)
        ttk.Entry(row2, textvariable=password, show="‚Ä¢").pack(side=tk.LEFT, fill=tk.X, expand=True)

        hint = ttk.Label(frm, foreground="#6c757d",
            text="Zostanie zapisane w .env jako hash (bezpiecznie). Pozostaw puste, by nie zmieniaƒá.",
            wraplength=480)  # Dodana w≈Ça≈õciwo≈õƒá zawijania tekstu
        hint.pack(anchor=tk.W, pady=(6,10), fill=tk.X)

        btns = ttk.Frame(frm); btns.pack(fill=tk.X, pady=(10,0))
        def save():
            # Zapisz stare warto≈õci do por√≥wnania
            old_auth_enabled = env.get('ADMIN_AUTH_ENABLED', '0')
            
            # walidacja loginu
            if not username.get().strip():
                messagebox.showwarning("Walidacja", "Login nie mo≈ºe byƒá pusty.", parent=win)
                return
            # aktualizacja s≈Çownika env
            env['ADMIN_AUTH_ENABLED'] = '1' if enabled.get() else '0'
            env['ADMIN_USERNAME'] = username.get().strip()
            # je≈õli podano nowe has≈Ço ‚Äì generuj hash
            if password.get():
                try:
                    env['ADMIN_PASSWORD_HASH'] = generate_password_hash(password.get())
                except Exception as e:
                    messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô utworzyƒá hasha: {e}", parent=win)
                    return
            # zadbaj o SECRET_KEY je≈õli brak
            env.setdefault('FLASK_SECRET_KEY', 'change-me-' + str(os.getpid()))

            # zapisz .env ‚Äì zachowujƒÖc proste uporzƒÖdkowanie
            order = [
                'DB_HOST','DB_NAME','DB_USER','DB_PASSWORD','DB_PORT',
                'FLASK_HOST','FLASK_PORT','FLASK_DEBUG',
                'FLASK_SECRET_KEY',
                'ADMIN_AUTH_ENABLED','ADMIN_USERNAME','ADMIN_PASSWORD_HASH'
            ]
            lines = []
            for k in order:
                if k in env: lines.append(f"{k}={env[k]}")
            # dopisz resztƒô ewentualnych kluczy
            for k,v in env.items():
                if k not in order: lines.append(f"{k}={v}")

            try:
                with open(env_path,'w',encoding='utf-8') as f:
                    f.write("# --- KONFIGURACJA BAZY DANYCH POSTGRESQL ---\n")
                    f.write("\n".join([l for l in lines if l.split('=')[0] in {'DB_HOST','DB_NAME','DB_USER','DB_PASSWORD','DB_PORT'}]))
                    f.write("\n\n# --- KONFIGURACJA SERWERA FLASK ---\n")
                    f.write("\n".join([l for l in lines if l.split('=')[0] in {'FLASK_HOST','FLASK_PORT','FLASK_DEBUG','FLASK_SECRET_KEY'}]))
                    f.write("\n\n# --- ADMIN / BEZPIECZE≈ÉSTWO ---\n")
                    f.write("\n".join([l for l in lines if l.split('=')[0] in {'ADMIN_AUTH_ENABLED','ADMIN_USERNAME','ADMIN_PASSWORD_HASH'}]))
                    # wszelka reszta:
                    others = [l for l in lines if l.split('=')[0] not in {
                        'DB_HOST','DB_NAME','DB_USER','DB_PASSWORD','DB_PORT',
                        'FLASK_HOST','FLASK_PORT','FLASK_DEBUG','FLASK_SECRET_KEY',
                        'ADMIN_AUTH_ENABLED','ADMIN_USERNAME','ADMIN_PASSWORD_HASH'
                    }]
                    if others:
                        f.write("\n\n# --- POZOSTA≈ÅE ---\n")
                        f.write("\n".join(others))
            except Exception as e:
                messagebox.showerror("‚ùå B≈ÇƒÖd zapisu", str(e), parent=win)
                return

            # poinformuj launcher o zmianach
            self.on_env_changed()
            
            # Automatyczny restart serwera przy zmianie autoryzacji 
            new_auth_enabled = env['ADMIN_AUTH_ENABLED']
            
            # Sprawd≈∫ czy zmieniono ustawienia autoryzacji i czy serwer dzia≈Ça
            if old_auth_enabled != new_auth_enabled and "backend" in self.managed_processes:
                # Zapamiƒôtaj tryb serwera
                was_network = self.managed_processes["backend"].get("network_mode", False)
                
                # Komunikat o restarcie
                restart_msg = (
                    f"{'W≈ÇƒÖczono' if new_auth_enabled == '1' else 'Wy≈ÇƒÖczono'} autoryzacjƒô admina.\n\n"
                    "Serwer backend zostanie automatycznie zrestartowany,\n"
                    "aby zastosowaƒá nowe ustawienia bezpiecze≈Ñstwa."
                )
                
                messagebox.showinfo("üîÑ Restart serwera", restart_msg, parent=win)
                
                # Zamknij okno ustawie≈Ñ
                win.destroy()
                
                # Logowanie do konsoli
                self.log(f"\n{'='*60}\n")
                self.log(f"üîÑ Restartowanie serwera - zmiana ustawie≈Ñ autoryzacji admina...\n")
                self.log(f"   ‚Ä¢ Autoryzacja: {'W≈ÅƒÑCZONA ‚úÖ' if new_auth_enabled == '1' else 'WY≈ÅƒÑCZONA ‚ùå'}\n")
                if new_auth_enabled == '1':
                    self.log(f"   ‚Ä¢ Login: {env['ADMIN_USERNAME']}\n")
                    self.log(f"   ‚Ä¢ Has≈Ço: {'Ustawione ‚úÖ' if env.get('ADMIN_PASSWORD_HASH') else 'Brak ‚ö†Ô∏è'}\n")
                self.log(f"{'='*60}\n\n")
                
                # Zatrzymaj serwer
                self.stop_managed_process("backend")
                
                # Funkcja do ponownego uruchomienia
                def restart_server():
                    if was_network:
                        self.start_network_server()
                    else:
                        self.start_managed_process("backend", "Serwer Backend (Lokalny)")
                        self.server_btn.config(
                            text="‚èπÔ∏è Zatrzymaj Serwer (Lokalny)", 
                            style="Danger.TButton"
                        )
                    
                    # Dodatkowe powiadomienie po restarcie
                    if new_auth_enabled == '1':
                        self.log("\n‚úÖ Serwer uruchomiony z W≈ÅƒÑCZONƒÑ autoryzacjƒÖ.\n")
                        self.log(f"   Aby wej≈õƒá do panelu admina u≈ºyj:\n")
                        self.log(f"   ‚Ä¢ Login: {env['ADMIN_USERNAME']}\n")
                        self.log(f"   ‚Ä¢ Has≈Ço: (to kt√≥re ustawi≈Çe≈õ)\n\n")
                    else:
                        self.log("\n‚úÖ Serwer uruchomiony z WY≈ÅƒÑCZONƒÑ autoryzacjƒÖ.\n")
                        self.log("   Panel admina jest teraz dostƒôpny bez logowania.\n\n")
                
                # Poczekaj 800ms i wystartuj ponownie
                self.after(800, restart_server)
            else:
                # Nie by≈Ço zmiany autoryzacji lub serwer nie dzia≈Ça
                messagebox.showinfo("‚úÖ Zapisano", "Ustawienia administratora zapisane.", parent=win)
                win.destroy()

        ttk.Button(btns, text="üíæ Zapisz", command=save, style="Success.TButton").pack(side=tk.RIGHT)
        ttk.Button(btns, text="Anuluj", command=win.destroy, style="Secondary.TButton").pack(side=tk.RIGHT, padx=(0,8))


    def start_managed_process(self, key, name):
        """
        Uruchamia zewnƒôtrzny skrypt jako zarzƒÖdzany proces potomny.
        Tworzy dedykowanƒÖ konsolƒô i monitoruje wyj≈õcie procesu.
        
        Args:
            key: Identyfikator procesu (klucz w s≈Çowniku SCRIPTS)
            name: Czytelna nazwa procesu
        """
        # Sprawdzenie czy proces ju≈º dzia≈Ça
        if key in self.managed_processes:
            messagebox.showwarning(
                "‚ö†Ô∏è Proces ju≈º dzia≈Ça", 
                f"Proces '{name}' jest ju≈º uruchomiony."
            )
            return

        self.log(f"üöÄ Uruchamianie: {name}...\n")
        script_info = SCRIPTS[key]

        # --- TWORZENIE KONSOLI DLA PROCESU ---
        
        # Tworzenie nowej zak≈Çadki z konsolƒÖ
        tab_frame = ttk.Frame(self.notebook)
        console = self.create_console_widget(tab_frame)
        
        # Ikona dla zak≈Çadki
        tab_text = f"üìã {name}"
        self.notebook.add(tab_frame, text=tab_text)
        self.notebook.select(tab_frame)

        # --- KONFIGURACJA ≈öRODOWISKA ---
        env = os.environ.copy()
        env["PYTHONIOENCODING"] = "utf-8"
        env["PYTHONUTF8"] = "1"

        # Wczytanie zmiennych z pliku .env do ≈õrodowiska procesu
        # Zapewnia to, ≈ºe wszystkie uruchamiane skrypty majƒÖ dostƒôp do konfiguracji
        env_path = os.path.join(BACKEND_DIR, ".env")
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        env_key, env_value = line.split('=', 1)  
                        env[env_key.strip()] = env_value.strip()

        # --- PRZYGOTOWANIE KOMENDY ---
        
        # Budowanie listy argument√≥w dla Popen
        if key == "tests":
            # Odpal pytest jako modu≈Ç Pythona
            command = [sys.executable, script_info["path"]] + script_info["args"]
        else:
            command = [sys.executable, "-X", "utf8", "-u", script_info["path"]]

        # Dodanie specjalnej flagi dla edytora genealogii
        if key == "genealogy_editor":
            command.append("--launched-by-gui")
        
        # --- URUCHOMIENIE PROCESU ---
        
        # Flagi creationflags do ukrycia okna konsoli na Windows
        creation_flags = (
            (subprocess.CREATE_NO_WINDOW | subprocess.CREATE_NEW_PROCESS_GROUP)
            if platform.system() == "nt"
            else 0
        )
        
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            cwd=script_info["cwd"],
            encoding="utf-8",
            errors="replace",
            creationflags=creation_flags,
            env=env,
        )

        # --- ZAPISANIE INFORMACJI O PROCESIE ---
        
        self.managed_processes[key] = {
            "process": process,
            "console": console,
            "tab_frame": tab_frame,
            "name": name,
        }

        # --- URUCHOMIENIE MONITOROWANIA ---
        
        # Uruchomienie wƒÖtku do odczytywania wyj≈õcia z procesu
        threading.Thread(
            target=self.read_process_output, 
            args=(key,), 
            daemon=True
        ).start()

        # Automatyczne otwarcie URL je≈õli zdefiniowany
        if key in URLS:
            threading.Timer(1.5, lambda: webbrowser.open(URLS[key])).start()

        # Aktualizacja interfejsu
        self.update_processes_ui()

    def stop_managed_process(self, key):
        """
        Zatrzymuje zarzƒÖdzany proces w bezpieczny spos√≥b.
        Najpierw pr√≥buje zako≈Ñczyƒá gracefully, potem wymusza zabicie.
        
        Args:
            key: Identyfikator procesu do zatrzymania
        """
        if key not in self.managed_processes:
            return

        info = self.managed_processes[key]
        process = info["process"]
        name = info["name"]

        # Logowanie akcji
        msg_stop = f"\n‚èπÔ∏è Zatrzymywanie procesu: {name}...\n"
        self.log(msg_stop, console=info["console"])
        self.log(msg_stop)

        try:
            # --- PR√ìBA NORMALNEGO ZATRZYMANIA ---
            
            # U≈ºycie odpowiedniej metody w zale≈ºno≈õci od systemu
            if platform.system() == "nt":
                process.send_signal(signal.CTRL_BREAK_EVENT)
            else:
                process.terminate()
            
            # Oczekiwanie na zako≈Ñczenie (timeout 2 sekundy)
            process.wait(timeout=2)
            
        except (subprocess.TimeoutExpired, ProcessLookupError, PermissionError):
            # --- WYMUSZENIE ZATRZYMANIA ---
            
            msg_kill = f"‚ö†Ô∏è Proces '{name}' nie odpowiedzia≈Ç ‚Äì wymuszam zatrzymanie.\n"
            self.log(msg_kill, console=info["console"])
            self.log(msg_kill)
            process.kill()
            process.wait()

        # --- CZYSZCZENIE ZASOB√ìW ---
        
        # Usuniƒôcie z listy proces√≥w
        del self.managed_processes[key]
        
        # Usuniƒôcie zak≈Çadki konsoli
        self.notebook.forget(info["tab_frame"])
        
        # Aktualizacja interfejsu
        self.update_processes_ui()

        # Specjalna obs≈Çuga dla serwera backend
        if key == "backend":
            self.server_btn.config(
                text="üöÄ Uruchom Serwer Backend", 
                style="Success.TButton"
            )

    def read_process_output(self, key):
        """
        Czyta wyj≈õcie z procesu linia po linii w osobnym wƒÖtku.
        Przekazuje dane do konsoli GUI przez g≈Ç√≥wny wƒÖtek.
        
        Args:
            key: Identyfikator procesu
        """
        if key not in self.managed_processes:
            return

        info = self.managed_processes.get(key)
        if not info:
            return

        process = info["process"]
        console = info["console"]

        # Pƒôtla odczytuje dane a≈º do zamkniƒôcia strumienia wyj≈õciowego
        for line in iter(process.stdout.readline, ""):
            # Przekazanie linii do GUI przez g≈Ç√≥wny wƒÖtek
            self.after(0, self.log, line, console)
            
        # Po zako≈Ñczeniu pƒôtli, proces jest zako≈Ñczony
        self.event_queue.put((key, "finished"))

    def run_script_in_thread(self, script_info, script_name):
        """
        Uruchamia jednorazowy skrypt w wƒÖtku.
        U≈ºywane dla skrypt√≥w kt√≥re wykonujƒÖ zadanie i ko≈ÑczƒÖ dzia≈Çanie.
        
        Args:
            script_info: S≈Çownik z informacjami o skrypcie
            script_name: Czytelna nazwa skryptu
        """
        def target():
            """Funkcja wykonywana w osobnym wƒÖtku."""
            
            self.log(f"‚ö° Uruchamianie: {script_name}...\n")
            
            # Konfiguracja ≈õrodowiska
            env = os.environ.copy()
            env["PYTHONIOENCODING"] = "utf-8"
            env["PYTHONUTF8"] = "1"

            # Wczytanie zmiennych z pliku .env do ≈õrodowiska procesu
            env_path = os.path.join(BACKEND_DIR, ".env")
            if os.path.exists(env_path):
                with open(env_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            env_key, env_value = line.split('=', 1)  
                            env[env_key.strip()] = env_value.strip()

            # Flagi dla Windows
            creation_flags = (
                subprocess.CREATE_NO_WINDOW if platform.system() == "nt" else 0
            )
            
            # Uruchomienie procesu
            process = subprocess.Popen(
                [sys.executable, "-X", "utf8", "-u", script_info["path"]],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                cwd=script_info["cwd"],
                encoding="utf-8",
                errors="replace",
                creationflags=creation_flags,
                env=env,
            )
            
            # Odczyt wyj≈õcia linia po linii
            for line in iter(process.stdout.readline, ""):
                self.log(line)
            process.stdout.close()
            
            # Raportowanie zako≈Ñczenia
            return_code = process.wait()
            if return_code == 0:
                self.log(f"‚úÖ Zako≈Ñczono pomy≈õlnie: {script_name}\n")
            else:
                self.log(f"‚ùå Zako≈Ñczono z b≈Çƒôdem: {script_name} (kod: {return_code})\n")

        # Uruchomienie w osobnym wƒÖtku
        threading.Thread(target=target, daemon=True).start()

    def run_pytest(self):
        """
        Uruchamia pytest w wƒÖtku i przekierowuje wyj≈õcie bezpo≈õrednio
        do g≈Ç√≥wnej konsoli launchera (jak w migracji).
        """
        def target():
            self.log("üß™ Start test√≥w jednostkowych (pytest)...\n")
            try:
                # ≈örodowisko jak w migracji ‚Äì wczytaj .env backendu
                env = os.environ.copy()
                env["PYTHONIOENCODING"] = "utf-8"
                env["PYTHONUTF8"] = "1"

                env_path = os.path.join(BACKEND_DIR, ".env")
                if os.path.exists(env_path):
                    with open(env_path, 'r', encoding='utf-8') as f:
                        for line in f:
                            line = line.strip()
                            if line and not line.startswith('#') and '=' in line:
                                k, v = line.split('=', 1)
                                env[k.strip()] = v.strip()

                # Komenda pytest (cicho: -q). Katalog pracy: backend
                cmd = [sys.executable, "-m", "pytest", "tests", "-q"]

                # Windows: bez dodatkowego okna konsoli
                creation_flags = subprocess.CREATE_NO_WINDOW if platform.system() == "nt" else 0

                proc = subprocess.Popen(
                    cmd,
                    cwd=BACKEND_DIR,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    encoding="utf-8",
                    errors="replace",
                    creationflags=creation_flags,
                    env=env
                )

                # Strumieniuj linie do g≈Ç√≥wnej konsoli
                for line in iter(proc.stdout.readline, ""):
                    self.log(line)
                proc.stdout.close()

                rc = proc.wait()
                if rc == 0:
                    self.log("‚úÖ Testy zako≈Ñczone pomy≈õlnie.\n")
                else:
                    self.log(f"‚ùå Testy zako≈Ñczone b≈Çƒôdem (kod: {rc}).\n")

            except FileNotFoundError:
                self.log("‚ùå Nie znaleziono pytest. Zainstaluj: pip install pytest\n")
            except Exception as e:
                self.log(f"‚ùå B≈ÇƒÖd uruchamiania test√≥w: {e}\n")

        threading.Thread(target=target, daemon=True).start()


    def toggle_server(self, network_mode=False):  
        """
        Prze≈ÇƒÖcza stan serwera backend (uruchamia lub zatrzymuje).
        
        Args:
            network_mode: Je≈õli True, serwer bƒôdzie dostƒôpny w sieci lokalnej
        """
        if "backend" in self.managed_processes:
            self.stop_managed_process("backend")
        else:
            if network_mode:
                self.start_network_server()
            else:
                self.start_managed_process("backend", "Serwer Backend (Lokalny)")
                self.server_btn.config(
                    text="‚èπÔ∏è Zatrzymaj Serwer (Lokalny)", 
                    style="Danger.TButton"
                )

    def start_network_server(self):
        """
        Uruchamia serwer Flask dostƒôpny w sieci lokalnej.
        Modyfikuje spos√≥b uruchomienia aby nas≈Çuchiwa≈Ç na wszystkich interfejsach.
        """
        # Sprawd≈∫/skonfiguruj firewall
        if platform.system() == "Windows":
            self.setup_firewall_rule()
        
        # Pobierz lokalny IP
        local_ip = get_local_ip()
        
        # Pobierz konfiguracjƒô
        flask_config = get_flask_config()
        port = int(flask_config['port'])
        # Informacja dla u≈ºytkownika
        self.log(f"üåê Uruchamianie serwera w trybie SIECIOWYM...\n")
        self.log(f"üì° Serwer bƒôdzie dostƒôpny pod adresami:\n")
        self.log(f"   ‚Ä¢ Lokalnie: http://127.0.0.1:{port}\n")
        self.log(f"   ‚Ä¢ W sieci LAN: http://{local_ip}:{port}\n")
        self.log(f"   ‚Ä¢ Alternatywnie: http://{socket.gethostname()}:{port}\n")
        self.log(f"‚ö†Ô∏è UWAGA: Upewnij siƒô, ≈ºe firewall nie blokuje portu {port}!\n\n")
        
        script_info = SCRIPTS["backend"]
        
        # Tworzenie nowej zak≈Çadki z konsolƒÖ
        tab_frame = ttk.Frame(self.notebook)
        console = self.create_console_widget(tab_frame)
        tab_text = f"üåê Serwer Sieciowy"
        self.notebook.add(tab_frame, text=tab_text)
        self.notebook.select(tab_frame)
        
        # Konfiguracja ≈õrodowiska
        env = os.environ.copy()
        env["PYTHONIOENCODING"] = "utf-8"
        env["PYTHONUTF8"] = "1"

        # Wczytanie zmiennych z pliku .env
        env_path = os.path.join(BACKEND_DIR, ".env")
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        env_key, env_value = line.split('=', 1)  
                        env[env_key.strip()] = env_value.strip()
        
        # Tworzymy skrypt wrapper kt√≥ry uruchomi Flask z odpowiednimi parametrami
        wrapper_code = f'''import sys
import os
sys.path.insert(0, os.path.dirname(__file__))
from app import app

if __name__ == '__main__':
    print('üöÄ Uruchamianie serwera Flask w trybie sieciowym...')
    print('üì° Serwer nas≈Çuchuje na wszystkich interfejsach (0.0.0.0)')
    print('=' * 60)
    app.run(host="0.0.0.0", port={port}, debug=True, use_reloader=False)
'''
        
        # Zapisz tymczasowy plik wrapper
        wrapper_path = os.path.join(BACKEND_DIR, "_network_server_wrapper.py")
        with open(wrapper_path, 'w', encoding='utf-8') as f:
            f.write(wrapper_code)
        
        # Uruchomienie procesu
        creation_flags = (
            (subprocess.CREATE_NO_WINDOW | subprocess.CREATE_NEW_PROCESS_GROUP)
            if platform.system() == "nt"
            else 0
        )
        
        process = subprocess.Popen(
            [sys.executable, "-X", "utf8", "-u", wrapper_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            cwd=BACKEND_DIR,
            encoding="utf-8",
            errors="replace",
            creationflags=creation_flags,
            env=env,
        )
        
        # Zapisanie informacji o procesie
        self.managed_processes["backend"] = {
            "process": process,
            "console": console,
            "tab_frame": tab_frame,
            "name": "Serwer Backend (Sieciowy)",
            "network_mode": True,
            "local_ip": local_ip
        }
        
        # Uruchomienie wƒÖtku do odczytywania wyj≈õcia
        threading.Thread(
            target=self.read_process_output, 
            args=("backend",), 
            daemon=True
        ).start()
        
        # Aktualizacja przycisku
        self.network_server_btn.config(
            text="‚èπÔ∏è Zatrzymaj Serwer Sieciowy",
            style="Danger.TButton"
        )
        
        # Poka≈º dialog z informacjami o dostƒôpie
        self.show_network_info_dialog(local_ip)
        
        self.update_processes_ui()

    def setup_firewall_rule(self):
        if platform.system() != "Windows":
            return True

        flask_config = get_flask_config()
        port = int(flask_config['port'])
        rule_name = f"Flask Server Port {port}"

        check_cmd = f'netsh advfirewall firewall show rule name="{rule_name}"'
        result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            self.log("‚úÖ Regu≈Ça firewall ju≈º istnieje.\n")
            return True

        self.log("üîß Konfigurowanie regu≈Çy firewall...\n")

        add_cmd = (
            'netsh advfirewall firewall add rule '
            f'name="{rule_name}" '
            'dir=in action=allow protocol=TCP '
            f'localport={port} enable=yes profile=any'
        )
        
        try:
            # Sprawd≈∫ czy mamy uprawnienia administratora
            import ctypes
            is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
            
            if not is_admin:
                # Popro≈õ o uruchomienie jako administrator
                response = messagebox.askyesno(
                    "üîê Wymagane uprawnienia administratora",
                    "Aby automatycznie skonfigurowaƒá firewall, aplikacja musi byƒá uruchomiona jako Administrator.\n\n"
                    "Czy chcesz:\n"
                    "‚Ä¢ TAK - Uruchomiƒá ponownie aplikacjƒô jako Administrator?\n"
                    "‚Ä¢ NIE - Skonfigurowaƒá firewall rƒôcznie p√≥≈∫niej?\n\n"
                    "Bez konfiguracji firewall serwer sieciowy nie bƒôdzie dostƒôpny z innych urzƒÖdze≈Ñ.",
                    icon="warning"
                )
                
                if response:
                    # Uruchom ponownie jako administrator
                    ctypes.windll.shell32.ShellExecuteW(
                        None, "runas", sys.executable, " ".join(sys.argv), None, 1
                    )
                    self.destroy()
                    sys.exit(0)
                else:
                    self.log("‚ö†Ô∏è Firewall nie zosta≈Ç skonfigurowany. Skonfiguruj go rƒôcznie.\n")
                    self.show_firewall_instructions()
                    return False
            
            # Mamy uprawnienia - dodaj regu≈Çƒô
            result = subprocess.run(add_cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                self.log("‚úÖ Regu≈Ça firewall zosta≈Ça dodana pomy≈õlnie!\n")
                messagebox.showinfo(
                    "‚úÖ Sukces",
                    "Regu≈Ça firewall zosta≈Ça skonfigurowana.\n"
                    "Port 5000 jest teraz otwarty dla po≈ÇƒÖcze≈Ñ przychodzƒÖcych."
                )
                return True
            else:
                self.log(f"‚ùå B≈ÇƒÖd dodawania regu≈Çy: {result.stderr}\n")
                return False
                
        except Exception as e:
            self.log(f"‚ùå B≈ÇƒÖd konfiguracji firewall: {e}\n")
            return False

    def show_firewall_instructions(self):
        """
        Wy≈õwietla instrukcje rƒôcznej konfiguracji firewall.
        """
        flask_config = get_flask_config()
        port = int(flask_config['port'])
        instructions = tk.Toplevel(self)
        instructions.title("üìã Instrukcja konfiguracji Firewall")
        instructions.geometry("600x500")
        instructions.transient(self)
        
        frame = ttk.Frame(instructions, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        text = scrolledtext.ScrolledText(frame, wrap=tk.WORD, font=("Consolas", 10))
        text.pack(fill=tk.BOTH, expand=True)
        
        content = """INSTRUKCJA RƒòCZNEJ KONFIGURACJI FIREWALL WINDOWS
    ================================================

    METODA 1 - Przez interfejs graficzny:
    -------------------------------------
    1. Naci≈õnij Win + R
    2. Wpisz: wf.msc
    3. Naci≈õnij Enter
    4. Kliknij "Regu≈Çy przychodzƒÖce" (po lewej)
    5. Kliknij "Nowa regu≈Ça..." (po prawej)
    6. Wybierz "Port" ‚Üí Dalej
    7. Wybierz "TCP" i wpisz "5000" ‚Üí Dalej
    8. Wybierz "Zezwalaj na po≈ÇƒÖczenie" ‚Üí Dalej
    9. Zaznacz wszystkie profile ‚Üí Dalej
    10. Nazwa: "Flask Server Port 5000" ‚Üí Zako≈Ñcz

    METODA 2 - Przez PowerShell (jako Administrator):
    -------------------------------------------------
    1. Kliknij prawym na Start ‚Üí Windows PowerShell (Administrator)
    2. Wklej i wykonaj komendƒô:

    New-NetFirewallRule -DisplayName "Flask Server Port 5000" -Direction Inbound -Protocol TCP -LocalPort 5000 -Action Allow -Profile Any

    METODA 3 - Przez Wiersz polece≈Ñ (jako Administrator):
    ----------------------------------------------------
    1. Kliknij prawym na Start ‚Üí Wiersz polece≈Ñ (Administrator)
    2. Wklej i wykonaj komendƒô:

    netsh advfirewall firewall add rule name="Flask Server Port 5000" dir=in action=allow protocol=TCP localport=5000

    TESTOWANIE:
    -----------
    Po dodaniu regu≈Çy, mo≈ºesz sprawdziƒá czy port jest otwarty:
    1. Uruchom serwer sieciowy
    2. Na innym urzƒÖdzeniu w sieci wpisz adres IP:5000
    3. Je≈õli strona siƒô ≈Çaduje - wszystko dzia≈Ça!

    UWAGA: Upewnij siƒô, ≈ºe oba urzƒÖdzenia sƒÖ w tej samej sieci WiFi/LAN!
    """
        
        text.insert("1.0", content)
        text.config(state="disabled")
        
        ttk.Button(
            frame,
            text="Zamknij",
            command=instructions.destroy,
            style="Primary.TButton"
        ).pack(pady=10)

    def toggle_network_server(self):
        """Prze≈ÇƒÖcza serwer sieciowy - uruchamia lub zatrzymuje."""
        if "backend" in self.managed_processes:
            if self.managed_processes["backend"].get("network_mode"):
                self.stop_managed_process("backend")
                self.network_server_btn.config(
                    text="üåê Uruchom Serwer Sieciowy",
                    style="Info.TButton"
                )
            else:
                messagebox.showwarning(
                    "‚ö†Ô∏è Uwaga",
                    "Lokalny serwer jest ju≈º uruchomiony.\n"
                    "Zatrzymaj go najpierw, aby uruchomiƒá serwer sieciowy."
                )
        else:
            self.toggle_server(network_mode=True)

    def show_network_info_dialog(self, local_ip):
        """
        Wy≈õwietla okno dialogowe z informacjami o dostƒôpie sieciowym.
        
        Args:
            local_ip: Lokalny adres IP serwera
        """
        # Pobierz konfiguracjƒô
        flask_config = get_flask_config()
        port = flask_config['port']
        
        info_window = tk.Toplevel(self)
        info_window.title("Informacje o Dostƒôpie Sieciowym")
        self._net_info_win = info_window 
        info_window.transient(self)
        info_window.grab_set()
        
        # Wycentrowanie okna
        w, h = 600, 400
        sw, sh = info_window.winfo_screenwidth(), info_window.winfo_screenheight()
        info_window.geometry(f"{w}x{h}+{(sw-w)//2}+{(sh-h)//2}")
        info_window.resizable(False, False)
        
        # G≈Ç√≥wna ramka
        main_frame = ttk.Frame(info_window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Nag≈Ç√≥wek
        ttk.Label(
            main_frame,
            text="‚úÖ Serwer uruchomiony w trybie sieciowym!",
            font=("Segoe UI", 14, "bold"),
            foreground=COLORS['success']
        ).pack(pady=(0, 20))
        
        # Informacje o dostƒôpie
        info_frame = ttk.LabelFrame(main_frame, text="üì° Adresy dostƒôpu", padding="15")
        info_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # Lista adres√≥w
        addresses = [
            ("Ten komputer:", f"http://127.0.0.1:{port}"),
            ("Inne urzƒÖdzenia w sieci:", f"http://{local_ip}:{port}"),
            ("Alternatywny adres:", f"http://{socket.gethostname()}:{port}"),
        ]

        # Sekcja: szybka komenda PowerShell
        ps_frame = ttk.LabelFrame(main_frame, text="‚ö° Konfiguracja Firewall (PowerShell)", padding="15")
        ps_frame.pack(fill=tk.X, pady=10)

        ps_command = f'New-NetFirewallRule -DisplayName "CzarnaMapa" -Direction Inbound -Protocol TCP -LocalPort {port} -Action Allow -Profile Any'

        ps_entry = ttk.Entry(ps_frame, width=80)
        ps_entry.insert(0, ps_command)
        ps_entry.config(state="readonly")
        ps_entry.pack(side=tk.LEFT, padx=(0,10), fill=tk.X, expand=True)

        def copy_ps():
            self.clipboard_clear()
            self.clipboard_append(ps_command)
            messagebox.showinfo("‚úÖ Skopiowano", "Komenda PowerShell zosta≈Ça skopiowana.\nUruchom PowerShell jako Administrator i wklej komendƒô.", parent=info_window)

        ttk.Button(ps_frame, text="üìã Kopiuj", command=copy_ps, style="Primary.TButton").pack(side=tk.LEFT)

        for label, address in addresses:
            addr_frame = ttk.Frame(info_frame)
            addr_frame.pack(fill=tk.X, pady=5)
            
            ttk.Label(addr_frame, text=label, width=25).pack(side=tk.LEFT)
            
            # Pole z adresem (do kopiowania)
            addr_entry = ttk.Entry(addr_frame, width=40)
            addr_entry.insert(0, address)
            addr_entry.config(state="readonly")
            addr_entry.pack(side=tk.LEFT, padx=10)
            
            # Przycisk kopiowania
            def copy_addr(addr=address):
                self.clipboard_clear()
                self.clipboard_append(addr)
                messagebox.showinfo("‚úÖ Skopiowano", f"Adres zosta≈Ç skopiowany:\n{addr}", parent=info_window)
            
            ttk.Button(
                addr_frame,
                text="üìã Kopiuj",
                command=copy_addr,
                width=10
            ).pack(side=tk.LEFT)
        
        # Instrukcje
        instr_row = ttk.Frame(main_frame)
        instr_row.pack(fill=tk.X, pady=(10, 0))

        ttk.Label(instr_row, text="‚ÑπÔ∏è").pack(side=tk.LEFT, padx=(0, 8))

        ttk.Button(
            instr_row,
            text="üìò Poka≈º instrukcjƒô (firewall / port 5000)",
            command=self.open_network_instructions_centered,
            style="Primary.TButton"
        ).pack(side=tk.LEFT, fill=tk.X, expand=True, ipady=6)

        # Przycisk zamkniƒôcia
        ttk.Button(
            main_frame,
            text="OK, rozumiem",
            command=info_window.destroy,
            style="Primary.TButton"
        ).pack(pady=10)

        #dopasowanie rozmiaru okna do zawarto≈õci i ustawienie minimalnego rozmiaru
        info_window.update_idletasks()
        req_w = info_window.winfo_reqwidth()
        req_h = info_window.winfo_reqheight()
        info_window.geometry(f"{req_w}x{req_h}")   # ustaw dok≈Çadnie wymagany rozmiar
        info_window.minsize(req_w, req_h)

    def open_network_instructions_centered(self):
        """Otwiera wyskakujƒÖce okno z instrukcjƒÖ i centruje je wzglƒôdem okna sieciowego."""
        parent = getattr(self, "_net_info_win", self)

        win = tk.Toplevel(parent)
        win.title("Instrukcja ‚Äì dostƒôp sieciowy / port 5000")
        win.resizable(False, False)
        win.transient(parent)   # trzymaj nad oknem sieciowym
        win.grab_set()          # tryb pseudo-modalny

        # Tre≈õƒá okna
        body = ttk.Frame(win, padding=14)
        body.pack(fill=tk.BOTH, expand=True)

        ttk.Label(
            body, text="Jak udostƒôpniƒá aplikacjƒô w sieci lokalnej:",
            font=("Segoe UI", 11, "bold")
        ).pack(anchor=tk.W, pady=(0, 6))

        ttk.Label(
            body, justify=tk.LEFT,
            text=(
                "1) Upewnij siƒô, ≈ºe serwer dzia≈Ça (zielony status w oknie sieciowym).\n"
                "2) Komputer-serwer i urzƒÖdzenie-klient muszƒÖ byƒá w tej samej sieci Wi-Fi/LAN.\n"
                "3) Na innym urzƒÖdzeniu wpisz adres IP z listy (np. http://192.168.x.x:5000).\n"
                "4) Je≈õli nie dzia≈Ça ‚Äì dodaj regu≈Çƒô Zapory Windows: TCP 5000, wszystkie profile.\n"
                "5) Sprawdzenie nas≈Çuchu:\n"
                "   ‚Ä¢ PowerShell: Get-NetTCPConnection -LocalPort 5000\n"
                "   ‚Ä¢ CMD:       netstat -ano | findstr :5000\n"
            ),
        ).pack(anchor=tk.W)

        ttk.Button(body, text="Zamknij", command=win.destroy, style="Secondary.TButton")\
        .pack(anchor=tk.E, pady=(10, 0))

        # Wy≈õrodkowanie wzglƒôdem rodzica
        parent.update_idletasks()
        win.update_idletasks()
        x = parent.winfo_rootx() + (parent.winfo_width()  - win.winfo_width())  // 2
        y = parent.winfo_rooty() + (parent.winfo_height() - win.winfo_height()) // 2
        win.geometry(f"+{x}+{y}")
        win.focus_set()

    def on_closing(self):  
        """
        Obs≈Çuguje zdarzenie zamkniƒôcia g≈Ç√≥wnego okna aplikacji.
        Pyta o potwierdzenie je≈õli sƒÖ uruchomione procesy.
        """
        if self.managed_processes:
            network_server = any(
                p.get("network_mode") for p in self.managed_processes.values()
            )
            
            warning_msg = f"Uruchomionych jest {len(self.managed_processes)} proces√≥w."
            if network_server:
                warning_msg += "\n\n‚ö†Ô∏è UWAGA: Serwer sieciowy jest aktywny!"
            warning_msg += "\n\nCzy chcesz je wszystkie zatrzymaƒá i zamknƒÖƒá aplikacjƒô?"
            
            result = messagebox.askyesno(
                "üîí Potwierdzenie zamkniƒôcia",
                warning_msg,
                icon="warning" if network_server else "question"
            )
            
            if result:
                self.log("\n" + "=" * 60 + "\n")
                self.log("üîí Zamykanie aplikacji - zatrzymywanie proces√≥w...\n")
                
                for key in list(self.managed_processes.keys()):
                    self.stop_managed_process(key)
                
                self.cleanup_temp_files()  
                self.destroy()
        else:
            self.cleanup_temp_files()  
            self.destroy()

    # --- METODY POMOCNICZE ---
    
    def cleanup_temp_files(self): 
        """Usuwa tymczasowe pliki utworzone przez launcher."""
        wrapper_path = os.path.join(BACKEND_DIR, "_network_server_wrapper.py")
        if os.path.exists(wrapper_path):
            try:
                os.remove(wrapper_path)
            except:
                pass
    def open_security_manager(self):
        """Otwiera okno mened≈ºera bezpiecze≈Ñstwa."""
        if "backend" not in self.managed_processes:
            messagebox.showwarning(
                "Serwer nieaktywny",
                "Uruchom serwer backend, aby zarzƒÖdzaƒá bezpiecze≈Ñstwem.",
                parent=self
            )
            return
        
        manager = SecurityManager(self)
        self.wait_window(manager)

#--- KLASA MENED≈ªERA BEZPIECZE≈ÉSTWA ---
class SecurityManager(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.transient(parent)
        self.title("üõ°Ô∏è Mened≈ºer Bezpiecze≈Ñstwa")
        
        window_width = 900
        window_height = 600

        # Pobranie wymiar√≥w ekranu
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()

        # Obliczenie pozycji x i y
        x_pos = (screen_width - window_width) // 2
        y_pos = (screen_height - window_height) // 2

        # Ustawienie geometrii (rozmiar + pozycja)
        self.geometry(f"{window_width}x{window_height}+{x_pos}+{y_pos}")
        
        self.minsize(700, 500)
        self.grab_set()
        self.parent_app = parent
        self.base_url = f"http://127.0.0.1:{self.parent_app.load_flask_config()['port']}/api/admin/security"

        self.create_widgets()
        self.load_data()

    def create_widgets(self):
        main_frame = ttk.Frame(self, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        # --- Zak≈Çadka: Logi Logowania ---
        logs_frame = ttk.Frame(notebook, padding="10")
        notebook.add(logs_frame, text="üìú Logi Logowania")
        self.create_logs_tab(logs_frame)

        # --- Zak≈Çadka: Zablokowane IP ---
        blocked_frame = ttk.Frame(notebook, padding="10")
        notebook.add(blocked_frame, text="üö´ Zablokowane Adresy IP")
        self.create_blocked_ips_tab(blocked_frame)

        # Przycisk zamkniƒôcia
        ttk.Button(main_frame, text="Zamknij", command=self.destroy, style="Secondary.TButton").pack(side=tk.RIGHT)

    def create_logs_tab(self, parent):
        action_frame = ttk.Frame(parent)
        action_frame.pack(fill=tk.X, pady=(0, 10))

        ttk.Label(action_frame, text="Ostatnie 100 pr√≥b logowania do panelu admina", style="Heading.TLabel").pack(side=tk.LEFT, anchor=tk.W)
        
        ttk.Button(action_frame, text="üóëÔ∏è Wyczy≈õƒá Wszystkie Logi", command=self.clear_login_logs, style="Warning.TButton").pack(side=tk.RIGHT)
        
        cols = ("ip", "user", "time", "status")
        self.logs_tree = ttk.Treeview(parent, columns=cols, show="headings")
        self.logs_tree.heading("ip", text="Adres IP")
        self.logs_tree.heading("user", text="U≈ºyty login")
        self.logs_tree.heading("time", text="Czas")
        self.logs_tree.heading("status", text="Status")
        self.logs_tree.column("ip", width=120)
        self.logs_tree.column("user", width=150)
        self.logs_tree.column("time", width=160)
        self.logs_tree.column("status", width=100, anchor=tk.CENTER)
        
        self.logs_tree.tag_configure("success", foreground="green")
        self.logs_tree.tag_configure("failure", foreground="red")

        self.logs_tree.pack(fill=tk.BOTH, expand=True)

    def create_blocked_ips_tab(self, parent):
        action_frame = ttk.Frame(parent)
        action_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Przycisk awaryjny po lewej
        emergency_btn = ttk.Button(action_frame, text="üö® Odblokuj Localhost (127.0.0.1)", command=self.unblock_localhost, style="Warning.TButton")
        emergency_btn.pack(side=tk.LEFT)
        
        # Kontener na przyciski po prawej stronie
        right_buttons_frame = ttk.Frame(action_frame)
        right_buttons_frame.pack(side=tk.RIGHT)
        
        ttk.Button(right_buttons_frame, text="üîì Odblokuj Zaznaczone", command=self.unblock_selected_ip, style="Success.TButton").pack(side=tk.LEFT, padx=5)
        ttk.Button(right_buttons_frame, text="‚ûï Zablokuj IP", command=self.manually_block_ip, style="Danger.TButton").pack(side=tk.LEFT)

        # BRAKUJƒÑCA CZƒò≈öƒÜ - TWORZENIE TABELI
        cols = ("ip", "reason", "time")
        self.blocked_tree = ttk.Treeview(parent, columns=cols, show="headings")
        self.blocked_tree.heading("ip", text="Adres IP")
        self.blocked_tree.heading("reason", text="Pow√≥d blokady")
        self.blocked_tree.heading("time", text="Czas blokady")
        self.blocked_tree.column("ip", width=120)
        self.blocked_tree.column("reason", width=400)
        self.blocked_tree.column("time", width=160)
        self.blocked_tree.pack(fill=tk.BOTH, expand=True)

    def load_data(self):
        self.load_logs()
        self.load_blocked_ips()

    def api_request(self, endpoint, method="GET", data=None):
        import requests
        import json
        try:
            url = f"{self.base_url}{endpoint}"
            headers = {"Content-Type": "application/json"}
            if method.upper() == "GET":
                response = requests.get(url, timeout=5)
            else:
                response = requests.post(url, data=json.dumps(data), headers=headers, timeout=5)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            messagebox.showerror("B≈ÇƒÖd API", f"Nie mo≈ºna po≈ÇƒÖczyƒá siƒô z serwerem:\n{e}", parent=self)
            return None

    def load_logs(self):
        for i in self.logs_tree.get_children(): self.logs_tree.delete(i)
        logs = self.api_request("/logs")
        if logs:
            for log in logs:
                status_text = "‚úÖ Powodzenie" if log['successful'] else "‚ùå B≈ÇƒÖd"
                tag = "success" if log['successful'] else "failure"
                self.logs_tree.insert("", "end", values=(log['ip_address'], log['username_attempt'], log['timestamp'], status_text), tags=(tag,))

    def clear_login_logs(self):
        """Wy≈õwietla potwierdzenie i czy≈õci logi logowania po stronie serwera."""
        if messagebox.askyesno(
            "üóëÔ∏è Potwierdzenie",
            "Czy na pewno chcesz trwale usunƒÖƒá WSZYSTKIE logi pr√≥b logowania?\n\nTej operacji nie mo≈ºna cofnƒÖƒá.",
            parent=self,
            icon="warning"
        ):
            response = self.api_request("/clear-logs", method="POST")
            if response and response.get("status") == "success":
                messagebox.showinfo("‚úÖ Sukces", "Wszystkie logi logowania zosta≈Çy usuniƒôte.", parent=self)
                self.parent_app.log("üõ°Ô∏è Wyczyszczono wszystkie logi logowania.\n")
                self.load_logs()  # Od≈õwie≈º widok
            else:
                messagebox.showerror("‚ùå B≈ÇƒÖd", "Nie uda≈Ço siƒô wyczy≈õciƒá log√≥w. Sprawd≈∫ konsolƒô serwera.", parent=self)

    def load_blocked_ips(self):
        for i in self.blocked_tree.get_children(): self.blocked_tree.delete(i)
        ips = self.api_request("/blocked-ips")
        if ips:
            for ip in ips:
                self.blocked_tree.insert("", "end", values=(ip['ip_address'], ip['reason'], ip['timestamp']))

    def unblock_selected_ip(self):
        selected_items = self.blocked_tree.selection()
        if not selected_items:
            messagebox.showwarning("Brak zaznaczenia", "Zaznacz adres IP do odblokowania.", parent=self)
            return
        
        for item_id in selected_items:
            ip_to_unblock = self.blocked_tree.item(item_id)['values'][0]
            if messagebox.askyesno("Potwierdzenie", f"Czy na pewno chcesz odblokowaƒá adres IP: {ip_to_unblock}?", parent=self):
                response = self.api_request("/unblock-ip", method="POST", data={"ip_address": ip_to_unblock})
                if response and response.get("status") == "success":
                    self.parent_app.log(f"üõ°Ô∏è Odblokowano adres IP: {ip_to_unblock}\n")
                else:
                    messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô odblokowaƒá {ip_to_unblock}.", parent=self)
        
        self.load_blocked_ips()

    def unblock_localhost(self):
        """Wysy≈Ça ≈ºƒÖdanie odblokowania adresu 127.0.0.1."""
        ip_to_unblock = "127.0.0.1"
        if messagebox.askyesno("Potwierdzenie", f"Czy na pewno chcesz odblokowaƒá adres {ip_to_unblock}?\n\nU≈ºyj tej opcji, je≈õli przypadkowo zablokowa≈Çe≈õ dostƒôp do serwera z lokalnego komputera.", parent=self):
            response = self.api_request("/unblock-ip", method="POST", data={"ip_address": ip_to_unblock})
            if response and response.get("status") == "success":
                messagebox.showinfo("Sukces", f"Wys≈Çano ≈ºƒÖdanie odblokowania dla adresu {ip_to_unblock}.", parent=self)
                self.parent_app.log(f"üõ°Ô∏è Wys≈Çano awaryjne odblokowanie dla: {ip_to_unblock}\n")
                self.load_blocked_ips() # Od≈õwie≈º listƒô, aby zobaczyƒá efekt
            else:
                messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô odblokowaƒá {ip_to_unblock}. Sprawd≈∫, czy serwer dzia≈Ça.", parent=self)

    def manually_block_ip(self):
        from tkinter import simpledialog
        ip = simpledialog.askstring("Blokada IP", "Wprowad≈∫ adres IP do zablokowania:", parent=self)
        if ip:
            reason = simpledialog.askstring("Pow√≥d blokady", "Podaj pow√≥d blokady (opcjonalnie):", parent=self)
            response = self.api_request("/block-ip", method="POST", data={"ip_address": ip, "reason": reason or "Rƒôczna blokada."})
            if response and response.get("status") == "success":
                self.parent_app.log(f"üõ°Ô∏è Rƒôcznie zablokowano adres IP: {ip}\n")
                self.load_blocked_ips()
            else:
                messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô zablokowaƒá {ip}.", parent=self)


# --- KLASA MENED≈ªERA KOPII ZAPASOWYCH ---

class BackupManager(tk.Toplevel):
    """
    Okno dialogowe do zarzƒÖdzania kopiami zapasowymi projektu.
    Umo≈ºliwia tworzenie, przywracanie, import i eksport archiw√≥w ZIP.
    """
    
    def __init__(self, parent):
        """
        Inicjalizacja okna mened≈ºera kopii zapasowych.
        
        Args:
            parent: Okno rodzica (g≈Ç√≥wna aplikacja)
        """
        super().__init__(parent)
        self.transient(parent)
        self.title("üíæ Uniwersalny Mened≈ºer Kopii Zapasowych")

        # --- AUTOMATYCZNE DOSTOSOWANIE DO EKRANU I DPI ---
        
        # Pobranie wymiar√≥w ekranu i DPI
        sw, sh = self.winfo_screenwidth(), self.winfo_screenheight()
        dpi = self.winfo_fpixels("1i")
        scale_factor = dpi / 96
        
        # Inteligentne okre≈õlenie rozmiaru okna
        if sw <= 1920:  # HD/Full HD
            w, h = min(int(sw * 0.75), 1100), min(int(sh * 0.80), 700)
        else:  # Wy≈ºsze rozdzielczo≈õci
            w, h = min(int(sw * 0.60), 1200), min(int(sh * 0.75), 800)
        
        # Dostosowanie do wysokiego DPI
        if scale_factor > 1.25:
            w = int(w / scale_factor * 1.3)
            h = int(h / scale_factor * 1.3)
        
        # Wycentrowanie okna
        x = (sw - w) // 2
        y = (sh - h) // 2
        
        self.geometry(f"{w}x{h}+{x}+{y}")
        self.minsize(800, 600)
        
        self.grab_set()
        
        # --- KONFIGURACJA STYL√ìW ---
        
        # Obliczenie rozmiaru czcionki
        if scale_factor <= 1.0:
            base_size = 10
        elif scale_factor <= 1.25:
            base_size = 10
        elif scale_factor <= 1.5:
            base_size = 11
        else:
            base_size = 12
        
        self.base_font_size = base_size
        
        # Konfiguracja stylu dla Treeview
        self.style = ttk.Style(self)
        row_height = int(base_size * 2.5)
        self.style.configure(
            "Treeview",
            rowheight=row_height,
            font=("Segoe UI", base_size)
        )
        self.style.configure(
            "Treeview.Heading",
            font=("Segoe UI", base_size, "bold")
        )

        # --- UTWORZENIE INTERFEJSU ---
        
        self.create_widgets()
        self.populate_backup_list()

    def create_widgets(self):
        """
        Tworzy interfejs graficzny mened≈ºera kopii zapasowych.
        U≈ºywa elastycznego uk≈Çadu pack dla lepszego dostosowania.
        """
        main_frame = ttk.Frame(self, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # --- SEKCJA TWORZENIA KOPII ---
        
        create_frame = ttk.LabelFrame(
            main_frame, 
            text="‚ûï Stw√≥rz NowƒÖ Kopiƒô ZapasowƒÖ", 
            padding="10"
        )
        create_frame.pack(fill=tk.X, pady=(0, 10))

        # Checkboxy do wyboru element√≥w
        self.backup_vars = {key: tk.BooleanVar(value=True) for key in DATA_FILES}
        self.backup_vars["scans"] = tk.BooleanVar(value=True)

        # Kontener na checkboxy i przycisk
        content_frame = ttk.Frame(create_frame)
        content_frame.pack(fill=tk.X)
        
        # Lewa strona - checkboxy w dw√≥ch kolumnach
        checkbox_frame = ttk.Frame(content_frame)
        checkbox_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # Pierwsza kolumna checkbox√≥w
        col1 = ttk.Frame(checkbox_frame)
        col1.pack(side=tk.LEFT, padx=10)
        
        ttk.Checkbutton(
            col1, 
            text="üìã W≈Ça≈õciciele i Demografia", 
            variable=self.backup_vars["owners"]
        ).pack(anchor="w", pady=2)
        
        ttk.Checkbutton(
            col1, 
            text="üó∫Ô∏è Dzia≈Çki (geometria)", 
            variable=self.backup_vars["parcels"]
        ).pack(anchor="w", pady=2)
        
        # Druga kolumna checkbox√≥w
        col2 = ttk.Frame(checkbox_frame)
        col2.pack(side=tk.LEFT, padx=10)
        
        ttk.Checkbutton(
            col2, 
            text="üå≥ Genealogia", 
            variable=self.backup_vars["genealogy"]
        ).pack(anchor="w", pady=2)
        
        ttk.Checkbutton(
            col2, 
            text="üìÑ Skany Protoko≈Ç√≥w", 
            variable=self.backup_vars["scans"]
        ).pack(anchor="w", pady=2)
        
        # Prawa strona - przycisk tworzenia
        ttk.Button(
            content_frame, 
            text="üéØ Stw√≥rz Kopiƒô ZIP", 
            command=self.create_backup, 
            style="Success.TButton"
        ).pack(side=tk.RIGHT, padx=10)

        # --- SEKCJA ZARZƒÑDZANIA KOPIAMI ---
        
        restore_frame = ttk.LabelFrame(
            main_frame, 
            text="üì¶ IstniejƒÖce Kopie Zapasowe", 
            padding="10"
        )
        restore_frame.pack(fill=tk.BOTH, expand=True, pady=10)

        # Tabela z listƒÖ kopii
        self.tree = ttk.Treeview(
            restore_frame, 
            columns=("filename",), 
            show="headings"
        )
        self.tree.heading("filename", text="üìÅ Nazwa Pliku (od najnowszej)")
        self.tree.pack(fill=tk.BOTH, expand=True)
        self.tree.bind("<<TreeviewSelect>>", self.on_select)

        # --- PASEK AKCJI ---
        
        action_frame = ttk.Frame(main_frame)
        action_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Lewa strona - etykieta statusu
        self.selected_label = ttk.Label(
            action_frame, 
            text="üì≠ Nic nie zaznaczono",
            foreground=COLORS['secondary'],
            font=("Segoe UI", self.base_font_size)
        )
        self.selected_label.pack(side=tk.LEFT, padx=5)

        # Prawa strona - przyciski akcji
        buttons_frame = ttk.Frame(action_frame)
        buttons_frame.pack(side=tk.RIGHT)
        
        self.delete_btn = ttk.Button(
            buttons_frame, 
            text="üóëÔ∏è Usu≈Ñ", 
            style="Danger.TButton", 
            command=self.delete_backup, 
            state=tk.DISABLED
        )
        self.delete_btn.pack(side=tk.LEFT, padx=2)
        
        self.restore_btn = ttk.Button(
            buttons_frame, 
            text="‚ôªÔ∏è Przywr√≥ƒá", 
            command=self.restore_backup, 
            state=tk.DISABLED,
            style="Warning.TButton"
        )
        self.restore_btn.pack(side=tk.LEFT, padx=2)

        self.export_btn = ttk.Button(
            buttons_frame, 
            text="üì§ Eksportuj", 
            command=self.export_backup, 
            state=tk.DISABLED
        )
        self.export_btn.pack(side=tk.LEFT, padx=2)

        self.import_btn = ttk.Button(
            buttons_frame, 
            text="üì• Importuj z dysku", 
            command=self.import_backup,
            style="Primary.TButton"
        )
        self.import_btn.pack(side=tk.LEFT, padx=2)

    def populate_backup_list(self):
        """
        Wczytuje listƒô plik√≥w kopii zapasowych z folderu backup.
        Sortuje pliki od najnowszych i wy≈õwietla w tabeli.
        """
        # Czyszczenie obecnej listy
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        try:
            # Wyszukiwanie plik√≥w backup
            files = [
                f for f in os.listdir(BACKUP_FOLDER) 
                if f.startswith("pelny_backup_projektu_") and f.endswith(".zip")
            ]
            
            # Sortowanie od najnowszych
            files.sort(reverse=True)
            
            # Dodawanie do tabeli
            for filename in files:
                self.tree.insert("", "end", iid=filename, values=(filename,))
                
        except FileNotFoundError:
            # Folder backup nie istnieje
            pass
            
        self.on_select()

    def on_select(self, event=None):
        """
        Aktualizuje stan przycisk√≥w w zale≈ºno≈õci od zaznaczenia.
        
        Args:
            event: Zdarzenie zmiany zaznaczenia (opcjonalne)
        """
        selected = self.tree.selection()
        
        if selected:
            self.selected_backup_file = selected[0]
            # Skr√≥cenie nazwy je≈õli za d≈Çuga
            display_name = self.selected_backup_file
            if len(display_name) > 40:
                display_name = display_name[:37] + "..."
            self.selected_label.config(
                text=f"üìÇ {display_name}",
                foreground=COLORS['primary']
            )
            self.restore_btn.config(state=tk.NORMAL)
            self.delete_btn.config(state=tk.NORMAL)
            self.export_btn.config(state=tk.NORMAL)
        else:
            self.selected_backup_file = None
            self.selected_label.config(
                text="üì≠ Nic nie zaznaczono",
                foreground=COLORS['secondary']
            )
            self.restore_btn.config(state=tk.DISABLED)
            self.delete_btn.config(state=tk.DISABLED)
            self.export_btn.config(state=tk.DISABLED)

    def export_backup(self):
        """
        Eksportuje zaznaczonƒÖ kopiƒô zapasowƒÖ do wybranej lokalizacji.
        Otwiera dialog wyboru miejsca zapisu.
        """
        if not self.selected_backup_file:
            messagebox.showwarning(
                "‚ö†Ô∏è Brak zaznaczenia", 
                "Najpierw zaznacz plik, kt√≥ry chcesz wyeksportowaƒá.", 
                parent=self
            )
            return

        source_path = os.path.join(BACKUP_FOLDER, self.selected_backup_file)
        
        # Otwarcie dialogu "Zapisz jako"
        destination_path = filedialog.asksaveasfilename(
            initialfile=self.selected_backup_file,
            defaultextension=".zip",
            filetypes=[("Archiwum ZIP", "*.zip")],
            title="Wybierz, gdzie zapisaƒá kopiƒô zapasowƒÖ",
        )

        if destination_path:
            try:
                shutil.copy2(source_path, destination_path)
                messagebox.showinfo(
                    "‚úÖ Sukces", 
                    f"Kopia zapasowa zosta≈Ça pomy≈õlnie wyeksportowana.", 
                    parent=self
                )
            except Exception as e:
                messagebox.showerror(
                    "‚ùå B≈ÇƒÖd eksportu", 
                    f"Nie uda≈Ço siƒô zapisaƒá pliku:\n{e}", 
                    parent=self
                )

    def import_backup(self):
        """
        Importuje kopiƒô zapasowƒÖ z zewnƒôtrznej lokalizacji.
        Kopiuje wybrany plik do folderu backup projektu.
        """
        source_path = filedialog.askopenfilename(
            filetypes=[("Archiwum ZIP", "*.zip")],
            title="Wybierz plik kopii zapasowej do zaimportowania",
        )

        if source_path:
            filename = os.path.basename(source_path)
            destination_path = os.path.join(BACKUP_FOLDER, filename)

            # Sprawdzenie czy plik ju≈º istnieje
            if os.path.exists(destination_path):
                if not messagebox.askyesno(
                    "‚ö†Ô∏è Plik istnieje", 
                    f"Plik '{filename}' ju≈º istnieje.\nCzy chcesz go nadpisaƒá?", 
                    parent=self
                ):
                    return

            try:
                shutil.copy2(source_path, destination_path)
                messagebox.showinfo(
                    "‚úÖ Sukces", 
                    f"Plik '{filename}' zosta≈Ç pomy≈õlnie zaimportowany.", 
                    parent=self
                )
                self.populate_backup_list()
            except Exception as e:
                messagebox.showerror(
                    "‚ùå B≈ÇƒÖd importu", 
                    f"Nie uda≈Ço siƒô skopiowaƒá pliku:\n{e}", 
                    parent=self
                )

    def create_backup(self):
        """
        Tworzy nowƒÖ kopiƒô zapasowƒÖ z wybranymi elementami.
        Wy≈õwietla pasek postƒôpu podczas archiwizacji.
        """
        # Sprawdzenie czy co≈õ wybrano
        components_to_backup = [key for key, var in self.backup_vars.items() if var.get()]
        if not components_to_backup:
            messagebox.showwarning(
                "‚ö†Ô∏è Nic nie wybrano", 
                "Zaznacz co najmniej jeden element do zarchiwizowania.", 
                parent=self
            )
            return
        
        # --- OKNO POSTƒòPU ---
        
        progress_window = tk.Toplevel(self)
        progress_window.title("üíæ Tworzenie Kopii Zapasowej")
        progress_window.transient(self)
        progress_window.grab_set()
        
        # Pozycjonowanie okna
        x = self.winfo_x() + (self.winfo_width() - 400) // 2
        y = self.winfo_y() + (self.winfo_height() - 150) // 2
        progress_window.geometry(f"400x180+{x}+{y}")
        progress_window.resizable(False, False)

        # Elementy interfejsu
        ttk.Label(
            progress_window, 
            text="üì¶ Przygotowywanie plik√≥w...", 
            font=("Segoe UI", 11), 
            padding=10
        ).pack(pady=(15, 5))
        
        progress_bar = ttk.Progressbar(
            progress_window, 
            orient="horizontal", 
            length=360, 
            mode="determinate"
        )
        progress_bar.pack(pady=5, padx=20)
        
        status_label = ttk.Label(
            progress_window, 
            text="", 
            padding=5, 
            wraplength=350
        )
        status_label.pack(pady=(5, 10))

        # --- FUNKCJA ARCHIWIZACJI ---
        
        def backup_thread_func():
            """Funkcja wykonywana w osobnym wƒÖtku - tworzy archiwum."""
            try:
                # Generowanie nazwy pliku
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_filename = f"pelny_backup_projektu_{timestamp}.zip"
                backup_path = os.path.join(BACKUP_FOLDER, backup_filename)

                # Zbieranie plik√≥w do archiwizacji
                files_to_zip = []
                
                # Pliki JSON
                for key in ["owners", "parcels", "genealogy"]:
                    if self.backup_vars[key].get():
                        if os.path.exists(DATA_FILES[key]["path"]):
                            files_to_zip.append(
                                (DATA_FILES[key]["path"], os.path.basename(DATA_FILES[key]["path"]))
                            )
                        for related_path in DATA_FILES[key].get("related", []):
                            if os.path.exists(related_path):
                                files_to_zip.append(
                                    (related_path, os.path.basename(related_path))
                                )
                
                # Skany protoko≈Ç√≥w
                if self.backup_vars["scans"].get() and os.path.exists(PROTOKOLY_FOLDER):
                    for root, _, files in os.walk(PROTOKOLY_FOLDER):
                        for file in files:
                            file_path = os.path.join(root, file)
                            arcname = os.path.relpath(file_path, BASE_DIR)
                            files_to_zip.append((file_path, arcname))

                # Konfiguracja paska postƒôpu
                progress_bar["maximum"] = len(files_to_zip)

                # Tworzenie archiwum ZIP
                with zipfile.ZipFile(backup_path, "w", zipfile.ZIP_DEFLATED) as zf:
                    for i, (file_path, arcname) in enumerate(files_to_zip):
                        # Aktualizacja statusu
                        status_label.config(text=f"üìÅ Pakowanie: {os.path.basename(arcname)}")
                        zf.write(file_path, arcname)
                        progress_bar["value"] = i + 1
                        self.update_idletasks()

                # Oznaczenie sukcesu
                progress_window.success = True
                progress_window.backup_name = backup_filename
                
            except Exception as e:
                progress_window.success = False
                progress_window.error_message = str(e)
            finally:
                # Zamkniƒôcie okna postƒôpu
                self.after(100, progress_window.destroy)

        # Uruchomienie archiwizacji w wƒÖtku
        progress_window.success = None
        threading.Thread(target=backup_thread_func, daemon=True).start()
        self.wait_window(progress_window)

        # --- OBS≈ÅUGA WYNIKU ---
        
        if hasattr(progress_window, "success") and progress_window.success:
            messagebox.showinfo(
                "‚úÖ Sukces", 
                f"Utworzono kopiƒô zapasowƒÖ:\n{progress_window.backup_name}", 
                parent=self
            )
            self.populate_backup_list()
        elif hasattr(progress_window, "error_message") and progress_window.error_message:
            messagebox.showerror(
                "‚ùå B≈ÇƒÖd", 
                f"Nie uda≈Ço siƒô utworzyƒá kopii zapasowej:\n{progress_window.error_message}", 
                parent=self
            )

    def delete_backup(self):
        """
        Usuwa zaznaczony plik kopii zapasowej.
        Wymaga potwierdzenia u≈ºytkownika.
        """
        if not hasattr(self, "selected_backup_file") or not self.selected_backup_file:
            return

        filename = self.selected_backup_file
        
        # Potwierdzenie usuniƒôcia
        if messagebox.askyesno(
            "üóëÔ∏è Potwierdzenie usuniƒôcia", 
            f"Czy na pewno chcesz trwale usunƒÖƒá plik:\n\n{filename}?", 
            parent=self,
            icon="warning"
        ):
            backup_path = os.path.join(BACKUP_FOLDER, filename)
            try:
                os.remove(backup_path)
                messagebox.showinfo(
                    "‚úÖ Sukces", 
                    f"Usuniƒôto plik: {filename}", 
                    parent=self
                )
                self.populate_backup_list()
            except Exception as e:
                messagebox.showerror(
                    "‚ùå B≈ÇƒÖd", 
                    f"Nie uda≈Ço siƒô usunƒÖƒá pliku:\n{e}", 
                    parent=self
                )

    def restore_backup(self):
        """
        Przywraca dane z wybranej kopii zapasowej.
        UWAGA: Operacja nieodwracalna - nadpisuje obecne dane!
        """
        selected = self.tree.selection()
        if not selected:
            return
            
        filename = selected[0]

        # Ostrze≈ºenie dla u≈ºytkownika
        msg = (
            "‚ö†Ô∏è UWAGA! Ta operacja jest NIEODWRACALNA.\n\n"
            f"Czy na pewno chcesz przywr√≥ciƒá dane z pliku:\n'{filename}'?\n\n"
            "Spowoduje to:\n"
            "‚Ä¢ NADPISANIE wszystkich istniejƒÖcych danych (JSON)\n"
            "‚Ä¢ ZASTƒÑPIENIE folderu ze skanami\n"
            "‚Ä¢ UTRATƒò wszystkich niezapisanych zmian"
        )

        if messagebox.askyesno(
            "‚ö†Ô∏è POTWIERDZENIE KRYTYCZNEJ OPERACJI", 
            msg, 
            icon="warning", 
            parent=self
        ):
            backup_path = os.path.join(BACKUP_FOLDER, filename)
            
            try:
                with zipfile.ZipFile(backup_path, "r") as zf:
                    archive_contents = zf.namelist()

                    # --- PRZYWRACANIE SKAN√ìW ---
                    
                    scan_files_in_zip = [
                        f for f in archive_contents 
                        if f.startswith("assets/protokoly/")
                    ]
                    
                    if scan_files_in_zip:
                        # Usuniƒôcie obecnego folderu
                        if os.path.exists(PROTOKOLY_FOLDER):
                            shutil.rmtree(PROTOKOLY_FOLDER)
                        
                        # Rozpakowanie skan√≥w
                        for file_info in zf.infolist():
                            if file_info.filename.startswith("assets/protokoly/"):
                                zf.extract(file_info, path=BASE_DIR)
                    
                    # --- PRZYWRACANIE PLIK√ìW JSON ---
                    
                    for key in ["owners", "parcels", "genealogy"]:
                        json_filename = os.path.basename(DATA_FILES[key]["path"])
                        if json_filename in archive_contents:
                            zf.extract(json_filename, path=BACKUP_FOLDER)
                        
                        # Przywracanie plik√≥w powiƒÖzanych
                        for related_path in DATA_FILES[key].get("related", []):
                            related_filename = os.path.basename(related_path)
                            if related_filename in archive_contents:
                                zf.extract(related_filename, path=BACKUP_FOLDER)

                messagebox.showinfo(
                    "‚úÖ Sukces", 
                    "Kopia zapasowa zosta≈Ça przywr√≥cona pomy≈õlnie.\n\n"
                    "Uruchom ponownie edytory, aby zobaczyƒá przywr√≥cone dane.", 
                    parent=self
                )
                
            except Exception as e:
                messagebox.showerror(
                    "‚ùå B≈ÇƒÖd przywracania", 
                    f"WystƒÖpi≈Ç krytyczny b≈ÇƒÖd:\n{e}", 
                    parent=self
                )

# --- PUNKT WEJ≈öCIA APLIKACJI ---

if __name__ == "__main__":
    """
    G≈Ç√≥wny punkt wej≈õcia aplikacji.
    Tworzy instancjƒô launchera i uruchamia pƒôtlƒô zdarze≈Ñ.
    """
    
    # Utworzenie i uruchomienie aplikacji
    app = AppLauncher()
    app.mainloop()