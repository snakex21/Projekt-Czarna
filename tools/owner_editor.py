import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, scrolledtext, filedialog
import json
import os
import re
import shutil
import zipfile
import threading
import tkinter.font as tkfont
import subprocess
import sys
import ctypes
import platform

# --- KONFIGURACJA DPI DLA WINDOWS ---

# Ustawienie ≈õwiadomo≈õci DPI dla system√≥w Windows, aby interfejs by≈Ç ostry
# na monitorach o wysokiej rozdzielczo≈õci (4K, wysokie DPI).
if platform.system() == "Windows":
    try:  # Windows ‚â• 8.1
        ctypes.windll.shcore.SetProcessDpiAwareness(2)  # PER_MONITOR_AWARE_V2
    except AttributeError:  # Windows 7
        ctypes.windll.user32.SetProcessDPIAware()

# --- KONFIGURACJA ≈öCIE≈ªEK I PLIK√ìW ---

# Okre≈õlenie katalogu, w kt√≥rym znajduje siƒô ten skrypt.
# U≈ºywane jako punkt odniesienia dla wszystkich wzglƒôdnych ≈õcie≈ºek.
script_dir = os.path.dirname(os.path.abspath(__file__))

# ≈öcie≈ºka do folderu z kopiami zapasowymi danych.
BACKUP_FOLDER = os.path.join(script_dir, "..", "backup")

# ≈öcie≈ºka do g≈Ç√≥wnego pliku JSON z danymi w≈Ça≈õcicieli.
JSON_FILE_PATH = os.path.join(BACKUP_FOLDER, "owner_data_to_import.json")

# ≈öcie≈ºka do pliku JSON z danymi demograficznymi.
DEMOGRAFIA_JSON_PATH = os.path.join(BACKUP_FOLDER, "demografia.json")

# ≈öcie≈ºka do pliku JavaScript zawierajƒÖcego oryginalne dane (do importu jednorazowego).
JS_FILE_PATH = os.path.join(script_dir, "..", "wlasciciele", "owner.js")

# ≈öcie≈ºka do katalogu backend z skryptami migracji.
BACKEND_DIR = os.path.join(script_dir, "..", "backend")

# ≈öcie≈ºka do skryptu Python odpowiedzialnego za migracjƒô danych do bazy.
MIGRATE_SCRIPT = os.path.join(BACKEND_DIR, "migrate_data.py")

# --- STA≈ÅE STYLIZACJI INTERFEJSU ---

# Definicje kolor√≥w dla przycisk√≥w
BUTTON_COLORS = {
    'primary': '#0d6efd',    # Niebieski
    'success': '#198754',    # Zielony 
    'danger': '#dc3545',     # Czerwony
    'warning': '#ffc107',    # ≈ª√≥≈Çty
    'info': '#0dcaf0',       # Jasnoniebieski
    'secondary': '#6c757d',  # Szary
}

# --- G≈Å√ìWNA KLASA APLIKACJI ---

class OwnerEditorApp(tk.Tk):
    """
    G≈Ç√≥wna aplikacja edytora danych w≈Ça≈õcicieli.
    Zapewnia interfejs graficzny do zarzƒÖdzania danymi protoko≈Ç√≥w,
    skanami dokument√≥w oraz danymi demograficznymi.
    """
    
    def __init__(self):
        """Inicjalizacja g≈Ç√≥wnego okna aplikacji i wszystkich komponent√≥w."""
        super().__init__()

        # --- KONFIGURACJA SKALOWANIA DPI I CZCIONEK ---
        
        # Obliczenie skali DPI dla bie≈ºƒÖcego monitora.
        # 96 DPI to standardowa warto≈õƒá (100% skali w Windows).
        dpi = self.winfo_fpixels("1i")
        scale = dpi / 96
        
        # Ustawienie skalowania Tkinter zgodnie z DPI monitora.
        self.tk.call("tk", "scaling", scale)

        # Obliczenie bazowego rozmiaru czcionki proporcjonalnie do skali DPI.
        base_size = int(11 * scale)  # 11pt przy 100% skali

        # Konfiguracja domy≈õlnej czcionki systemowej dla ca≈Çej aplikacji.
        def_font = tkfont.nametofont("TkDefaultFont")
        def_font.configure(family="Segoe UI", size=base_size)
        
        # Aktualizacja wszystkich predefiniowanych czcionek Tkinter.
        for name in (
            "TkTextFont",
            "TkFixedFont",
            "TkMenuFont",
            "TkHeadingFont",
            "TkCaptionFont",
        ):
            try:
                tkfont.nametofont(name).configure(size=base_size)
            except tk.TclError:
                pass

        # --- KONFIGURACJA STYL√ìW TTK ---
        
        # Inicjalizacja mened≈ºera styl√≥w dla widget√≥w TTK.
        self.style = ttk.Style(self)
        self.style.theme_use("clam")  # U≈ºywamy motywu 'clam' dla lepszej kontroli nad wyglƒÖdem

        # Konfiguracja wysoko≈õci wierszy w Treeview proporcjonalnie do DPI.
        row_h = int(base_size * 3.0)  # Wy≈ºszy wiersz zapobiega uciƒôciu liter "g/y"
        self.style.configure(
            "Treeview", 
            rowheight=row_h, 
            padding=(0, 2)  # Dodatkowy padding g√≥ra/d√≥≈Ç
        )
        self.style.configure(
            "Treeview.Heading", 
            font=("Segoe UI", base_size + 1, "bold")
        )
        
        # Definicje styl√≥w dla przycisk√≥w akcji z kolorami.
        self.style.configure("Primary.TButton", foreground="white", background=BUTTON_COLORS['primary'])
        self.style.configure("Success.TButton", foreground="white", background=BUTTON_COLORS['success'])
        self.style.configure("Danger.TButton", foreground="white", background=BUTTON_COLORS['danger'])
        self.style.configure("Warning.TButton", foreground="black", background=BUTTON_COLORS['warning'])
        self.style.configure("Info.TButton", foreground="white", background=BUTTON_COLORS['info'])
        
        # Konfiguracja efekt√≥w hover dla przycisk√≥w
        self.style.map("Primary.TButton",
            background=[('active', '#0b5ed7'), ('pressed', '#0a58ca')])
        self.style.map("Success.TButton",
            background=[('active', '#157347'), ('pressed', '#146c43')])
        self.style.map("Danger.TButton",
            background=[('active', '#bb2d3b'), ('pressed', '#b02a37')])

        # --- GEOMETRIA I POZYCJONOWANIE OKNA ---
        
        # Pobranie wymiar√≥w ekranu.
        sw, sh = self.winfo_screenwidth(), self.winfo_screenheight()
        
        # Ustawienie okna na 90% szeroko≈õci i wysoko≈õci ekranu.
        w, h = int(sw * 0.90), int(sh * 0.90)
        self.geometry(f"{w}x{h}+{(sw - w)//2}+{(sh - h)//2}")
        self.minsize(800, 600)  # Minimalne wymiary okna

        # Automatyczna maksymalizacja okna na systemie Windows.
        if platform.system() == "Windows":
            self.state("zoomed")

        # --- OP√ì≈πNIONA MAKSYMALIZACJA I FOKUS ---
        
        # Funkcja wywo≈Çywana po uruchomieniu pƒôtli zdarze≈Ñ.
        def _maximize_and_focus():
            """Maksymalizuje okno i ustawia fokus na polu wyszukiwania."""
            self.state("zoomed")  # Pe≈Çny ekran
            self.focus_force()  # Aktywacja okna
            self.search_entry.focus_force()  # Kursor w polu wyszukiwania

        # Zaplanowanie wykonania po 0ms (gdy pƒôtla zdarze≈Ñ siƒô uruchomi).
        self.after(0, _maximize_and_focus)

        self.title("üìã Edytor Danych W≈Ça≈õcicieli - System ZarzƒÖdzania Protoko≈Çami")

        # --- INICJALIZACJA INTERFEJSU I DANYCH ---
        
        # Utworzenie wszystkich widget√≥w interfejsu.
        self.create_widgets()
        
        # Globalne skr√≥ty klawiszowe.
        self.bind_all(
            "<Control-f>", lambda e: self.after_idle(self.search_entry.focus_force)
        )
        
        # Automatyczne dopasowanie szeroko≈õci kolumn przy zmianie rozmiaru okna.
        self.bind("<Configure>", self._auto_resize_columns)
        
        # Upewnienie siƒô, ≈ºe folder backup istnieje.
        self.ensure_backup_folder_exists()
        
        # Wczytanie danych z pliku JSON.
        self.load_from_json()
        
        # Sprawdzenie integralno≈õci folder√≥w ze skanami (po 100ms).
        self.after(100, self.check_for_unlinked_folders)

        # Nas≈Çuchiwanie zmian w polu wyszukiwania.
        self.search_var.trace_add("write", self._filter_owners)
        
        # Aktualizacja uk≈Çadu i ustawienie poczƒÖtkowego fokusu.
        self.update_idletasks()
        self.search_entry.focus_set()

    # --- METODY SPRAWDZANIA INTEGRALNO≈öCI DANYCH ---

    def check_for_unlinked_folders(self):
        """
        Sprawdza folder z protoko≈Çami i szuka folder√≥w osieroconych
        (kt√≥re nie majƒÖ odpowiednika w danych JSON).
        Oferuje u≈ºytkownikowi mo≈ºliwo≈õƒá ich usuniƒôcia.
        """
        print("Sprawdzanie integralno≈õci folder√≥w ze skanami...")
        
        # ≈öcie≈ºka do g≈Ç√≥wnego folderu ze skanami protoko≈Ç√≥w.
        protokoly_path = os.path.join(script_dir, "..", "assets", "protokoly")
        if not os.path.exists(protokoly_path):
            return

        try:
            # Pobranie listy wszystkich folder√≥w w katalogu protoko≈Ç√≥w.
            all_folders = {
                f
                for f in os.listdir(protokoly_path)
                if os.path.isdir(os.path.join(protokoly_path, f))
            }

            # Pobranie zbioru wszystkich kluczy z za≈Çadowanych danych.
            all_keys = set(self.data.keys())

            # Identyfikacja folder√≥w bez odpowiednika w danych.
            unlinked_folders = all_folders - all_keys

            if unlinked_folders:
                # Przygotowanie komunikatu dla u≈ºytkownika.
                message = (
                    f"Znaleziono {len(unlinked_folders)} folder(√≥w) w 'assets/protokoly', "
                    "kt√≥re nie sƒÖ powiƒÖzane z ≈ºadnym w≈Ça≈õcicielem w pliku JSON:\n\n"
                    f"- {', '.join(unlinked_folders)}\n\n"
                    "Czy chcesz je usunƒÖƒá? Mo≈ºe to byƒá przydatne do posprzƒÖtania po starych lub "
                    "b≈Çƒôdnych wpisach."
                )

                # Dialog z pytaniem o usuniƒôcie.
                if messagebox.askyesno("Wykryto niepowiƒÖzane foldery", message):
                    deleted_count = 0
                    errors = []
                    
                    # Pr√≥ba usuniƒôcia ka≈ºdego osieroconego folderu.
                    for folder_name in unlinked_folders:
                        try:
                            shutil.rmtree(os.path.join(protokoly_path, folder_name))
                            print(f"Usuniƒôto osierocony folder: {folder_name}")
                            deleted_count += 1
                        except Exception as e:
                            errors.append(f"- {folder_name}: {e}")

                    # Podsumowanie operacji czyszczenia.
                    summary = (
                        f"Usuniƒôto {deleted_count} z {len(unlinked_folders)} folder√≥w."
                    )
                    if errors:
                        summary += (
                            "\n\nWystƒÖpi≈Çy b≈Çƒôdy podczas usuwania:\n"
                            + "\n".join(errors)
                        )
                        messagebox.showerror("B≈Çƒôdy podczas czyszczenia", summary)
                    else:
                        messagebox.showinfo("Czyszczenie zako≈Ñczone", summary)
            else:
                print("Wszystkie foldery sƒÖ poprawnie powiƒÖzane.")
                
        except Exception as e:
            messagebox.showwarning(
                "B≈ÇƒÖd", f"WystƒÖpi≈Ç b≈ÇƒÖd podczas sprawdzania folder√≥w: {e}"
            )

    # --- METODY TWORZENIA INTERFEJSU ---

    def create_widgets(self):
        """
        Tworzy i rozmieszcza wszystkie widgety interfejsu u≈ºytkownika.
        Struktura:
        - Pasek narzƒôdzi (toolbar) z przyciskami akcji
        - Pole wyszukiwania
        - Tabela (Treeview) z listƒÖ w≈Ça≈õcicieli
        """
        
        # G≈Ç√≥wna ramka z paddingiem.
        main_frame = ttk.Frame(self, padding="10")
        main_frame.grid(row=0, column=0, sticky="nsew")
        
        # Konfiguracja rozciƒÖgania g≈Ç√≥wnego okna.
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # Konfiguracja rozciƒÖgania zawarto≈õci g≈Ç√≥wnej ramki.
        main_frame.grid_rowconfigure(1, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)

        # --- PASEK NARZƒòDZI Z UPIƒòKSZONYMI PRZYCISKAMI ---
        
        toolbar = ttk.Frame(main_frame)
        toolbar.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        
        # Utworzenie poszczeg√≥lnych ramek dla grup przycisk√≥w
        data_frame = ttk.LabelFrame(toolbar, text="üìÅ Dane", padding="5")
        data_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        # Przycisk wczytywania danych z JSON z ikonƒÖ.
        load_btn = ttk.Button(
            data_frame, 
            text="üìÇ Wczytaj dane", 
            command=self.load_from_json,
            style="Primary.TButton"
        )
        load_btn.pack(side=tk.LEFT, padx=2)

        # Przycisk zarzƒÖdzania kopiami zapasowymi z ikonƒÖ.
        backup_btn = ttk.Button(
            data_frame, 
            text="üíæ Kopie zapasowe", 
            command=self.open_backup_manager
        )
        backup_btn.pack(side=tk.LEFT, padx=2)
        
        # Przycisk zapisu zmian z ikonƒÖ i stylem.
        save_btn = ttk.Button(
            data_frame,
            text="‚úÖ ZAPISZ ZMIANY",
            command=self.save_to_json,
            style="Success.TButton",
        )
        save_btn.pack(side=tk.LEFT, padx=2)
        
        # Grupa przycisk√≥w migracji
        migration_frame = ttk.LabelFrame(toolbar, text="üîÑ Migracja", padding="5")
        migration_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        # Przycisk migracji danych z ikonƒÖ.
        migrate_btn = ttk.Button(
            migration_frame, 
            text="‚ö° MIGRUJ DANE", 
            command=self.run_migration,
            style="Info.TButton"
        )
        migrate_btn.pack(side=tk.LEFT, padx=2)
        
        # Przycisk zapisz + migruj z ikonƒÖ.
        save_migrate_btn = ttk.Button(
            migration_frame,
            text="üí´ ZAPISZ + MIGRUJ",
            command=self.save_and_migrate,
            style="Success.TButton",
        )
        save_migrate_btn.pack(side=tk.LEFT, padx=2)
        
        # Grupa dodatkowych narzƒôdzi
        tools_frame = ttk.LabelFrame(toolbar, text="üõ†Ô∏è Narzƒôdzia", padding="5")
        tools_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        # Przycisk edytora demografii z ikonƒÖ.
        demo_btn = ttk.Button(
            tools_frame, 
            text="üìä Demografia", 
            command=self.open_demografia_editor
        )
        demo_btn.pack(side=tk.LEFT, padx=2)
        
        # --- SEKCJA WYSZUKIWANIA I ZARZƒÑDZANIA ---
        
        # Ramka wyszukiwania po prawej
        search_frame = ttk.LabelFrame(toolbar, text="üîç Wyszukiwanie", padding="5")
        search_frame.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Pole wyszukiwania z placeholderem.
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=40)
        self.search_entry.pack(side=tk.LEFT, padx=2)
        self.search_entry.bind(
            "<Return>", lambda e: self._filter_owners()
        )  # Filtruj po Enter

        # Grupa przycisk√≥w zarzƒÖdzania w≈Ça≈õcicielami
        manage_frame = ttk.LabelFrame(toolbar, text="üë• ZarzƒÖdzaj", padding="5")
        manage_frame.pack(side=tk.RIGHT, padx=(10, 10))
        
        # Przycisk dodawania w≈Ça≈õciciela z ikonƒÖ.
        add_btn = ttk.Button(
            manage_frame, 
            text="‚ûï Dodaj w≈Ça≈õciciela", 
            command=self.add_new_owner,
            style="Success.TButton"
        )
        add_btn.pack(side=tk.LEFT, padx=2)
        
        # Przycisk usuwania z ikonƒÖ ostrze≈ºenia.
        delete_btn = ttk.Button(
            manage_frame,
            text="üóëÔ∏è Usu≈Ñ zaznaczonych",
            command=self.delete_selected_owner,
            style="Danger.TButton",
        )
        delete_btn.pack(side=tk.LEFT, padx=2)

        # --- TABELA Z LISTƒÑ W≈ÅA≈öCICIELI ---
        
        tree_frame = ttk.Frame(main_frame)
        tree_frame.grid(row=1, column=0, sticky="nsew")
        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)
        
        # Konfiguracja kolumn tabeli.
        self.tree = ttk.Treeview(
            tree_frame, columns=("lp", "name", "plots_count"), show="headings"
        )
        self.tree.heading("lp", text="Lp.")
        self.tree.heading("name", text="Imiƒô i Nazwisko")
        self.tree.heading("plots_count", text="Liczba dzia≈Çek")
        
        # Szeroko≈õci kolumn.
        self.tree.column("lp", width=60, anchor="center", stretch=tk.NO)
        self.tree.column("name", width=300, stretch=tk.YES)
        self.tree.column("plots_count", width=150, anchor="center", stretch=tk.NO)
        
        # Paski przewijania.
        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        hsb = ttk.Scrollbar(tree_frame, orient="horizontal", command=self.tree.xview)
        self.tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        # Rozmieszczenie tabeli i pask√≥w.
        self.tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        
        # Bindowanie zdarze≈Ñ.
        self.tree.bind("<Double-1>", self.on_double_click)
        self.tree.bind("<Delete>", self.on_delete_key)

    # --- METODY POMOCNICZE ---

    def ensure_backup_folder_exists(self):
        """Upewnia siƒô, ≈ºe folder backup istnieje. Tworzy go, je≈õli nie istnieje."""
        if not os.path.exists(BACKUP_FOLDER):
            os.makedirs(BACKUP_FOLDER)

    # --- METODY OTWIERANIA OKIEN DIALOGOWYCH ---

    def open_demografia_editor(self):
        """Otwiera okno edytora danych demograficznych."""
        demografia_editor = DemografiaEditorWindow(self)
        self.wait_window(
            demografia_editor
        )  # Czekaj, a≈º okno demografii zostanie zamkniƒôte
        self.search_entry.focus_set()  # Przywr√≥ƒá fokus do pola wyszukiwania

    def open_backup_manager(self):
        """Otwiera okno mened≈ºera kopii zapasowych."""
        backup_manager = BackupManagerWindow(self)
        self.wait_window(backup_manager)
        self.search_entry.focus_set()

    # --- METODY ZARZƒÑDZANIA DANYMI W≈ÅA≈öCICIELI ---

    def delete_selected_owner(self):
        """
        Usuwa zaznaczonego w≈Ça≈õciciela (lub wielu) z danych.
        Opcjonalnie usuwa r√≥wnie≈º powiƒÖzany folder ze skanami.
        """
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning(
                "Brak zaznaczenia",
                "Najpierw zaznacz w≈Ça≈õciciela (lub kilku) na li≈õcie.",
            )
            return

        # Iteracja przez zaznaczone elementy.
        for item_key in list(selected_items):
            owner_name = self.data[item_key].get("ownerName", "tego w≈Ça≈õciciela")

            # Potwierdzenie usuniƒôcia.
            if messagebox.askyesno(
                "Potwierdzenie usuniƒôcia",
                f"Czy na pewno chcesz usunƒÖƒá wpis dla: {owner_name}?",
            ):
                # Sprawdzenie istnienia folderu ze skanami.
                folder_to_delete = os.path.join(
                    script_dir, "..", "assets", "protokoly", item_key
                )
                should_delete_folder = False
                
                if os.path.exists(folder_to_delete):
                    if messagebox.askyesno(
                        "Usuwanie Folderu",
                        f"Znaleziono folder '{item_key}' ze skanami. Czy chcesz go r√≥wnie≈º usunƒÖƒá?",
                    ):
                        should_delete_folder = True

                try:
                    # Usuniƒôcie danych z pamiƒôci.
                    del self.data[item_key]

                    # Opcjonalne usuniƒôcie folderu.
                    if should_delete_folder:
                        shutil.rmtree(folder_to_delete)
                        print(f"Usuniƒôto folder: {folder_to_delete}")

                except Exception as e:
                    messagebox.showerror("B≈ÇƒÖd", f"WystƒÖpi≈Ç b≈ÇƒÖd podczas usuwania: {e}")

        self.refresh_treeview()

    def refresh_treeview(self):
        """
        Od≈õwie≈ºa zawarto≈õƒá tabeli z listƒÖ w≈Ça≈õcicieli.
        Dodatkowo wykonuje mechanizm "samonaprawy" - tworzy brakujƒÖce foldery dla skan√≥w.
        """
        # Czyszczenie obecnej zawarto≈õci tabeli.
        for item in self.tree.get_children():
            self.tree.delete(item)

        # --- MECHANIZM SAMONAPRAWY FOLDER√ìW ---
        
        protokoly_path = os.path.join(script_dir, "..", "assets", "protokoly")
        if not os.path.exists(protokoly_path):
            os.makedirs(protokoly_path)

        # Utworzenie brakujƒÖcych folder√≥w dla ka≈ºdego klucza w danych.
        for key in self.data.keys():
            owner_folder = os.path.join(protokoly_path, key)
            if not os.path.exists(owner_folder):
                try:
                    os.makedirs(owner_folder)
                    print(f"Naprawiono: Utworzono brakujƒÖcy folder '{key}'")
                except Exception as e:
                    print(f"B≈ÇƒÖd przy tworzeniu folderu dla '{key}': {e}")

        # --- SORTOWANIE I WYPE≈ÅNIANIE TABELI ---
        
        try:
            # Sortowanie kluczy wed≈Çug numeru porzƒÖdkowego (Lp.).
            sorted_keys = sorted(
                self.data.keys(),
                key=lambda k: int(self.data[k].get("orderNumber", "99999")),
            )
        except (ValueError, TypeError):
            # Fallback: sortowanie alfabetyczne.
            sorted_keys = sorted(self.data.keys())

        # Dodawanie wpis√≥w do tabeli.
        for key in sorted_keys:
            owner = self.data[key]
            # Obliczenie ≈ÇƒÖcznej liczby dzia≈Çek.
            plot_count = len(owner.get("buildingPlots", [])) + len(
                owner.get("agriculturalPlots", [])
            )
            self.tree.insert(
                "",
                tk.END,
                iid=key,
                values=(
                    owner.get("orderNumber", "N/A"),
                    owner.get("ownerName", "Brak nazwy"),
                    plot_count,
                ),
            )

    def _filter_owners(self, *args):
        """
        Filtruje listƒô w≈Ça≈õcicieli na podstawie tekstu w polu wyszukiwania.
        Przeszukuje zar√≥wno nazwƒô w≈Ça≈õciciela, jak i unikalny klucz.
        """
        search_term = self.search_var.get().lower()
        
        # Czyszczenie tabeli.
        for item in self.tree.get_children():
            self.tree.delete(item)

        # Sortowanie kluczy.
        sorted_keys = sorted(
            self.data.keys(),
            key=lambda k: int(self.data[k].get("orderNumber", "99999")),
        )
        
        # Filtrowanie i dodawanie pasujƒÖcych wpis√≥w.
        for key in sorted_keys:
            owner = self.data[key]
            owner_name = owner.get("ownerName", "Brak nazwy").lower()
            unique_key = key.lower()

            # Sprawdzenie, czy fraza wyszukiwania wystƒôpuje w nazwie lub kluczu.
            if search_term in owner_name or search_term in unique_key:
                plot_count = len(owner.get("buildingPlots", [])) + len(
                    owner.get("agriculturalPlots", [])
                )
                self.tree.insert(
                    "",
                    tk.END,
                    iid=key,
                    values=(
                        owner.get("orderNumber", "N/A"),
                        owner.get("ownerName", "Brak nazwy"),
                        plot_count,
                    ),
                )

    def _auto_resize_columns(self, event):
        """
        Automatycznie dostosowuje szeroko≈õƒá kolumn tabeli
        przy zmianie rozmiaru okna.
        """
        # Ca≈Çkowita szeroko≈õƒá dostƒôpna (minus pasek przewijania).
        total = event.width - 20
        lp_w = 60  # Sta≈Ça szeroko≈õƒá kolumny Lp.
        count_w = 150  # Sta≈Ça szeroko≈õƒá kolumny liczby dzia≈Çek
        # Reszta przestrzeni dla kolumny z nazwƒÖ.
        name_w = max(total - lp_w - count_w, 150)
        self.tree.column("name", width=name_w)

    # --- METODY IMPORTU I EKSPORTU DANYCH ---

    def load_from_json(self):
        """
        Wczytuje dane w≈Ça≈õcicieli z pliku JSON.
        Jest to standardowa metoda odczytu danych roboczych.
        """
        if not os.path.exists(JSON_FILE_PATH):
            messagebox.showinfo(
                "Informacja", "Nie znaleziono pliku JSON. Zaimportuj dane z 'owner.js'."
            )
            return
            
        try:
            with open(JSON_FILE_PATH, "r", encoding="utf-8") as f:
                self.data = json.load(f)
            messagebox.showinfo("‚úÖ Sukces", f"Wczytano {len(self.data)} w≈Ça≈õcicieli.")
            self.refresh_treeview()
        except Exception as e:
            messagebox.showerror("‚ùå B≈ÇƒÖd", f"Nie uda≈Ço siƒô wczytaƒá pliku JSON: {e}")

    def save_to_json(self):
        """Zapisuje bie≈ºƒÖce dane do pliku JSON."""
        try:
            with open(JSON_FILE_PATH, "w", encoding="utf-8") as f:
                json.dump(self.data, f, indent=4, ensure_ascii=False)
            messagebox.showinfo("‚úÖ Sukces", f"Zmiany zapisano w:\n{JSON_FILE_PATH}")
        except Exception as e:
            messagebox.showerror("‚ùå B≈ÇƒÖd zapisu", f"Nie uda≈Ço siƒô zapisaƒá pliku: {e}")

    # --- METODY MIGRACJI DANYCH DO BAZY ---

    def run_migration(self) -> bool:
        """
        Uruchamia skrypt migrate_data.py, kt√≥ry migruje dane do bazy PostgreSQL.
        Metoda konfiguruje ≈õrodowisko z prawid≈Çowym kodowaniem UTF-8 dla Windows,
        uruchamia skrypt migracji w osobnym procesie i przetwarza jego wyj≈õcie.
        
        Returns:
            bool: True je≈õli migracja zako≈Ñczy≈Ça siƒô sukcesem, False w przeciwnym razie.
            
        Proces migracji:
        1. Konfiguracja ≈õrodowiska z wymuszeniem UTF-8
        2. Uruchomienie skryptu migrate_data.py
        3. Przechwycenie i analiza wyj≈õcia
        4. Wy≈õwietlenie szczeg√≥≈Ç√≥w w oknie dialogowym
        """
        try:
            # --- KONFIGURACJA ≈öRODOWISKA ---
            
            # Przygotowanie ≈õrodowiska z wymuszeniem kodowania UTF-8.
            # Jest to krytyczne dla poprawnej obs≈Çugi polskich znak√≥w na Windows.
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            
            # --- URUCHOMIENIE SKRYPTU MIGRACJI ---
            
            # Uruchomienie skryptu Python w osobnym procesie z odpowiednim kodowaniem.
            result = subprocess.run(
                [sys.executable, MIGRATE_SCRIPT],  # U≈ºycie interpretera Python z sys.executable
                cwd=BACKEND_DIR,                   # Katalog roboczy to backend/
                capture_output=True,                # Przechwytywanie stdout i stderr
                text=True,                          # Traktowanie wyj≈õcia jako tekst (nie bajty)
                encoding='utf-8',                   # Wymuszenie kodowania UTF-8
                errors='replace',                   # ZastƒÖpienie nieprawid≈Çowych znak√≥w
                env=env                             # Przekazanie skonfigurowanego ≈õrodowiska
            )
            
            # --- ANALIZA WYNIKU MIGRACJI ---
            
            # Sprawdzenie kodu wyj≈õcia procesu (0 = sukces).
            if result.returncode == 0:
                # Migracja zako≈Ñczona sukcesem.
                success_msg = "Migracja danych zako≈Ñczy≈Ça siƒô pomy≈õlnie."
                
                if result.stdout:
                    # Je≈õli sƒÖ dane wyj≈õciowe, poka≈º szczeg√≥≈Çowe okno.
                    self.show_migration_details(success_msg, result.stdout, is_error=False)
                else:
                    # Brak szczeg√≥≈Ç√≥w - prosty komunikat.
                    messagebox.showinfo("‚úÖ Migracja zako≈Ñczona", success_msg)
                return True
            else:
                # Migracja zako≈Ñczona b≈Çƒôdem.
                error_msg = f"Skrypt migracji zwr√≥ci≈Ç kod b≈Çƒôdu: {result.returncode}"
                
                if result.stderr:
                    # Analiza typu b≈Çƒôdu i dostosowanie komunikatu.
                    if 'UnicodeEncodeError' in result.stderr:
                        # Specjalna obs≈Çuga b≈Çƒôd√≥w kodowania.
                        clean_error = "WystƒÖpi≈Ç problem z kodowaniem znak√≥w. Sprawd≈∫ logi migracji."
                        self.show_migration_details(error_msg, clean_error, is_error=True)
                    else:
                        # Wy≈õwietlenie pe≈Çnego komunikatu b≈Çƒôdu.
                        self.show_migration_details(error_msg, result.stderr, is_error=True)
                else:
                    # Brak szczeg√≥≈Ç√≥w b≈Çƒôdu.
                    messagebox.showerror("‚ùå B≈ÇƒÖd migracji", error_msg)
                return False
                
        except FileNotFoundError:
            # Nie znaleziono skryptu migracji.
            messagebox.showerror(
                "‚ùå Nie znaleziono skryptu", 
                f"Sprawd≈∫ ≈õcie≈ºkƒô:\n{MIGRATE_SCRIPT}"
            )
            return False
        except Exception as e:
            # Nieoczekiwany b≈ÇƒÖd podczas uruchamiania migracji.
            messagebox.showerror("‚ùå B≈ÇƒÖd migracji", str(e))
            return False

    def show_migration_details(self, title, details, is_error=False):
        """
        Wy≈õwietla szczeg√≥≈Çy migracji w osobnym oknie z mo≈ºliwo≈õciƒÖ przewijania.
        Okno zawiera sformatowany tekst z emoji zamiast znacznik√≥w tekstowych
        oraz przyciski do kopiowania i zapisu log√≥w.
        
        Args:
            title: Tytu≈Ç komunikatu wy≈õwietlany u g√≥ry okna
            details: Szczeg√≥≈Çowe informacje do wy≈õwietlenia (output skryptu)
            is_error: Czy to komunikat b≈Çƒôdu (True) czy sukcesu (False)
            
        Funkcjonalno≈õci okna:
        - Formatowanie tekstu z kolorowaniem i emoji
        - Przycisk kopiowania do schowka
        - Przycisk zapisu do pliku
        - Przewijanie d≈Çugich log√≥w
        """
        # --- UTWORZENIE OKNA DIALOGOWEGO ---
        
        # Utworzenie nowego okna potomnego.
        detail_window = tk.Toplevel(self)
        detail_window.title("üìã Szczeg√≥≈Çy migracji")
        detail_window.transient(self)
        detail_window.grab_set()
        
        # --- POZYCJONOWANIE I ROZMIAR OKNA ---
        
        # Ustawienie rozmiaru okna na podstawie rozmiaru ekranu.
        sw, sh = detail_window.winfo_screenwidth(), detail_window.winfo_screenheight()
        w, h = 700, 500
        detail_window.geometry(f"{w}x{h}+{(sw-w)//2}+{(sh-h)//2}")
        detail_window.minsize(600, 400)
        
        # --- G≈Å√ìWNA RAMKA INTERFEJSU ---
        
        main_frame = ttk.Frame(detail_window, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Etykieta z tytu≈Çem komunikatu.
        title_label = ttk.Label(
            main_frame, 
            text=title, 
            font=("Segoe UI", 11, "bold")
        )
        title_label.pack(anchor="w", pady=(0, 10))
        
        # --- POLE TEKSTOWE Z LOGAMI ---
        
        # Ramka dla pola tekstowego.
        text_frame = ttk.Frame(main_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        # Pole tekstowe z przewijaniem dla szczeg√≥≈Ç√≥w.
        text_widget = scrolledtext.ScrolledText(
            text_frame,
            wrap=tk.WORD,
            width=80,
            height=20,
            font=("Consolas", 10)  # Czcionka o sta≈Çej szeroko≈õci dla log√≥w
        )
        text_widget.pack(fill=tk.BOTH, expand=True)
        
        # --- FORMATOWANIE TEKSTU ---
        
        # Zamiana znacznik√≥w tekstowych na emoji dla lepszej czytelno≈õci.
        formatted_details = details
        formatted_details = formatted_details.replace('[OK]', '‚úîÔ∏è')
        formatted_details = formatted_details.replace('[SUKCES]', '‚úÖ')
        formatted_details = formatted_details.replace('[B≈ÅƒÑD KRYTYCZNY]', '‚ùå')
        formatted_details = formatted_details.replace('[B≈ÅƒÑD]', '‚ùå')
        formatted_details = formatted_details.replace('[INFO]', '‚ÑπÔ∏è')
        formatted_details = formatted_details.replace('[OSTRZE≈ªENIE]', '‚ö†Ô∏è')
        
        # Dodatkowe formatowanie separator√≥w.
        formatted_details = formatted_details.replace('========================================', '‚ïê' * 45)
        formatted_details = formatted_details.replace('=============================================', '‚ïê' * 45)
        
        # Wstawienie sformatowanego tekstu.
        text_widget.insert("1.0", formatted_details)
        
        # --- KONFIGURACJA KOLOROWANIA TEKSTU ---
        
        # Definicja tag√≥w do kolorowania r√≥≈ºnych typ√≥w komunikat√≥w.
        text_widget.tag_configure("header", font=("Consolas", 10, "bold"), foreground="#1e88e5")
        text_widget.tag_configure("success", foreground="#2e7d32")
        text_widget.tag_configure("error", foreground="#c62828")
        text_widget.tag_configure("warning", foreground="#f57c00")
        text_widget.tag_configure("step", font=("Consolas", 10, "bold"), foreground="#5e35b1")
        text_widget.tag_configure("separator", foreground="#757575")
        
        # --- AUTOMATYCZNE KOLOROWANIE LINII ---
        
        # Parsowanie i kolorowanie ka≈ºdej linii na podstawie zawarto≈õci.
        lines = formatted_details.split('\n')
        current_pos = "1.0"
        
        for i, line in enumerate(lines):
            line_start = f"{i+1}.0"
            line_end = f"{i+1}.end"
            
            # Zastosowanie odpowiedniego tagu na podstawie tre≈õci linii.
            if '‚ïê‚ïê‚ïê' in line or '‚îÄ‚îÄ‚îÄ' in line:
                text_widget.tag_add("separator", line_start, line_end)
            elif 'SKRYPT MIGRACJI DANYCH' in line:
                text_widget.tag_add("header", line_start, line_end)
            elif line.startswith('--- Krok'):
                text_widget.tag_add("step", line_start, line_end)
            elif '‚úîÔ∏è' in line:
                text_widget.tag_add("success", line_start, line_end)
            elif '‚úÖ' in line or 'SUKCES' in line:
                text_widget.tag_add("success", line_start, line_end)
            elif '‚ùå' in line or 'B≈ÅƒÑD' in line:
                text_widget.tag_add("error", line_start, line_end)
            elif '‚ö†Ô∏è' in line or 'OSTRZE≈ªENIE' in line:
                text_widget.tag_add("warning", line_start, line_end)
            elif '    ->' in line:  # Podkroki
                text_widget.tag_add("step", line_start, line_end)
        
        # Ustawienie pola jako tylko do odczytu.
        text_widget.config(state=tk.DISABLED)
        
        # --- RAMKA Z PRZYCISKAMI AKCJI ---
        
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Przycisk zamkniƒôcia (kolor zale≈ºy od typu komunikatu).
        close_btn = ttk.Button(
            btn_frame,
            text="Zamknij",
            command=detail_window.destroy,
            style="Success.TButton" if not is_error else "Danger.TButton"
        )
        close_btn.pack(side=tk.RIGHT)
        
        # --- PRZYCISK KOPIOWANIA DO SCHOWKA ---
        
        def copy_to_clipboard():
            """Kopiuje zawarto≈õƒá log√≥w do schowka systemowego."""
            self.clipboard_clear()
            self.clipboard_append(formatted_details)
            messagebox.showinfo("‚úÖ Skopiowano", "Tre≈õƒá zosta≈Ça skopiowana do schowka.", parent=detail_window)
        
        copy_btn = ttk.Button(
            btn_frame,
            text="üìã Kopiuj do schowka",
            command=copy_to_clipboard
        )
        copy_btn.pack(side=tk.RIGHT, padx=(0, 5))
        
        # --- PRZYCISK ZAPISU DO PLIKU ---
        
        def save_to_file():
            """Zapisuje logi do pliku tekstowego."""
            from datetime import datetime
            
            # Generowanie domy≈õlnej nazwy pliku z datƒÖ i czasem.
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = filedialog.asksaveasfilename(
                parent=detail_window,
                defaultextension=".txt",
                initialfile=f"migracja_log_{timestamp}.txt",
                filetypes=[("Pliki tekstowe", "*.txt"), ("Wszystkie pliki", "*.*")]
            )
            if filename:
                try:
                    # Zapis do pliku z kodowaniem UTF-8.
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(formatted_details)
                    messagebox.showinfo("‚úÖ Zapisano", f"Log zosta≈Ç zapisany do:\n{filename}", parent=detail_window)
                except Exception as e:
                    messagebox.showerror("‚ùå B≈ÇƒÖd", f"Nie uda≈Ço siƒô zapisaƒá pliku:\n{e}", parent=detail_window)
        
        save_btn = ttk.Button(
            btn_frame,
            text="üíæ Zapisz do pliku",
            command=save_to_file
        )
        save_btn.pack(side=tk.RIGHT, padx=(0, 5))

    def save_and_migrate(self):
        """
        Zapisuje dane do JSON, a nastƒôpnie od razu uruchamia migracjƒô.
        Metoda ≈ÇƒÖczy dwie operacje w jednƒÖ akcjƒô dla wygody u≈ºytkownika.
        """
        try:
            # --- ZAPIS DANYCH DO JSON ---
            
            # Najpierw zapisz dane do pliku.
            with open(JSON_FILE_PATH, "w", encoding="utf-8") as f:
                json.dump(self.data, f, indent=4, ensure_ascii=False)
            print(f"Dane zapisane do: {JSON_FILE_PATH}")
            
            # --- URUCHOMIENIE MIGRACJI ---
            
            # Nastƒôpnie uruchom migracjƒô danych do bazy.
            success = self.run_migration()
            
            # Od≈õwie≈ºenie widoku je≈õli migracja siƒô powiod≈Ça.
            if success:
                self.refresh_treeview()
                
        except Exception as e:
            messagebox.showerror("‚ùå B≈ÇƒÖd", f"WystƒÖpi≈Ç b≈ÇƒÖd podczas zapisu i migracji:\n{e}")

    # --- METODY OBS≈ÅUGI ZDARZE≈É ---

    def _open_edit_window(self, owner_dict, key=None):
        """
        Otwiera okno edycji dla wybranego w≈Ça≈õciciela.
        
        Args:
            owner_dict: S≈Çownik z danymi w≈Ça≈õciciela
            key: Unikalny klucz w≈Ça≈õciciela (None dla nowego wpisu)
        """
        # Pobierz aktualnie posortowane i przefiltrowane klucze z widoku.
        sorted_keys_on_screen = self.tree.get_children()

        # Otw√≥rz okno edycji.
        dlg = EditWindow(self, owner_dict, key, self.on_save, sorted_keys_on_screen)

        # Czekaj na zamkniƒôcie okna.
        self.wait_window(dlg)
        self.search_entry.focus_force()

    def on_double_click(self, event):
        """Obs≈Çuguje podw√≥jne klikniƒôcie na elemencie listy - otwiera okno edycji."""
        item_key = self.tree.focus()
        if item_key:
            self._open_edit_window(self.data[item_key], item_key)

    def on_delete_key(self, event):
        """Obs≈Çuguje naci≈õniƒôcie klawisza Delete - usuwa zaznaczonego w≈Ça≈õciciela."""
        self.delete_selected_owner()

    def add_new_owner(self):
        """Otwiera okno edycji dla nowego w≈Ça≈õciciela."""
        self._open_edit_window({}, None)

    def on_save(self, new_data, original_key):
        """
        Callback wywo≈Çywany po zapisie danych w oknie edycji.
        Waliduje dane i aktualizuje struktury danych.
        
        Args:
            new_data: Nowe dane w≈Ça≈õciciela
            original_key: Oryginalny klucz (mo≈ºe siƒô zmieniƒá)
            
        Returns:
            bool: True je≈õli zapis siƒô powi√≥d≈Ç, False w przypadku b≈Çƒôdu
        """
        # Pobranie i czyszczenie klucza.
        raw_key = new_data.get("unikalny_klucz", "").strip()

        # Sanityzacja klucza - usuniƒôcie niedozwolonych znak√≥w.
        safe_key = re.sub(r'[\\/*?:"<>|\s]+', "_", raw_key)
        safe_key = re.sub(r"__+", "_", safe_key)
        safe_key = safe_key.strip("_")

        if raw_key != safe_key:
            print(
                f"INFO: Klucz '{raw_key}' zosta≈Ç automatycznie poprawiony na '{safe_key}'."
            )
            new_data["unikalny_klucz"] = safe_key

        new_key = safe_key

        # --- WALIDACJA DANYCH ---
        
        if not new_key:
            messagebox.showerror(
                "‚ùå B≈ÇƒÖd Walidacji", "Pole 'Unikalny klucz' nie mo≈ºe byƒá puste!"
            )
            return False

        # Sprawdzenie unikalno≈õci klucza.
        if new_key in self.data and new_key != original_key:
            messagebox.showerror(
                "‚ùå B≈ÇƒÖd Walidacji",
                f"Unikalny klucz '{new_key}' jest ju≈º u≈ºywany przez innego w≈Ça≈õciciela!",
            )
            return False

        # --- ZARZƒÑDZANIE FOLDERAMI SKAN√ìW ---
        
        protokoly_path = os.path.join(script_dir, "..", "assets", "protokoly")

        try:
            if original_key and original_key != new_key:
                # Zmiana nazwy folderu przy zmianie klucza.
                old_folder = os.path.join(protokoly_path, original_key)
                if os.path.exists(old_folder):
                    new_folder = os.path.join(protokoly_path, new_key)
                    os.rename(old_folder, new_folder)
            elif not original_key:
                # Utworzenie nowego folderu dla nowego w≈Ça≈õciciela.
                new_folder = os.path.join(protokoly_path, new_key)
                if not os.path.exists(new_folder):
                    os.makedirs(new_folder)
        except OSError as e:
            messagebox.showerror(
                "‚ùå B≈ÇƒÖd Systemu Plik√≥w",
                f"Nie uda≈Ço siƒô zarzƒÖdzaƒá folderem protoko≈Çu:\n{e}",
            )
            return False

        # --- AKTUALIZACJA DANYCH ---
        
        # Usuniƒôcie klucza ze s≈Çownika danych (jest u≈ºywany jako klucz s≈Çownika).
        del new_data["unikalny_klucz"]
        
        # Zapisanie danych pod nowym kluczem.
        self.data[new_key] = new_data

        # Usuniƒôcie starego klucza, je≈õli siƒô zmieni≈Ç.
        if original_key and original_key != new_key:
            del self.data[original_key]

        # Od≈õwie≈ºenie widoku.
        self.refresh_treeview()
        self.search_entry.focus_set()
        return True

# --- KLASA OKNA EDYCJI W≈ÅA≈öCICIELA ---

class EditWindow(tk.Toplevel):
    """
    Okno dialogowe do edycji szczeg√≥≈Çowych danych w≈Ça≈õciciela.
    Zawiera formularz z wszystkimi polami oraz zarzƒÖdzanie skanami dokument√≥w.
    """
    
    def __init__(
        self, parent, owner_data, original_key, save_callback, sorted_keys=None
    ):
        """
        Inicjalizacja okna edycji.
        
        Args:
            parent: Okno rodzica (g≈Ç√≥wna aplikacja)
            owner_data: S≈Çownik z danymi w≈Ça≈õciciela
            original_key: Oryginalny klucz w≈Ça≈õciciela
            save_callback: Funkcja callback do zapisu danych
            sorted_keys: Lista posortowanych kluczy do nawigacji
        """
        super().__init__(parent)
        self.transient(parent)
        self.grab_set()
        self.title(f"Edycja Danych - {owner_data.get('ownerName', 'Nowy Wpis')}")

        # --- GEOMETRIA I POZYCJONOWANIE OKNA ---
        
        sw, sh = self.winfo_screenwidth(), self.winfo_screenheight()
        w, h = int(sw * 0.90), int(sh * 0.90)
        self.geometry(f"{w}x{h}+{(sw - w)//2}+{(sh - h)//2}")
        if platform.system() == "Windows":
            self.state("zoomed")
        self.minsize(800, 600)

        # Przechowywanie danych i stanu.
        self.owner_data = owner_data
        self.original_key = original_key
        self.save_callback = save_callback
        self.fields = {}  # S≈Çownik przechowujƒÖcy referencje do p√≥l formularza
        self.scans_widgets = {}  # S≈Çownik widget√≥w zarzƒÖdzania skanami

        # Lista kluczy do nawigacji miƒôdzy wpisami.
        self.sorted_keys = sorted_keys or []

        # --- UTWORZENIE PRZEWIJALNEGO KONTENERA ---
        
        outer = ttk.Frame(self)
        outer.pack(fill=tk.BOTH, expand=True)
        
        # Canvas umo≈ºliwia przewijanie zawarto≈õci.
        canvas = tk.Canvas(
            outer, highlightthickness=0, background=self.cget("background")
        )
        vbar = ttk.Scrollbar(outer, orient="vertical", command=canvas.yview)
        canvas.configure(yscrollcommand=vbar.set)
        vbar.pack(side=tk.RIGHT, fill=tk.Y)
        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # G≈Ç√≥wna ramka z formularzem.
        main = ttk.Frame(canvas, padding=15)
        win_id = canvas.create_window((0, 0), window=main, anchor="nw")
        
        # Konfiguracja automatycznego dopasowania rozmiaru.
        main.bind(
            "<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        canvas.bind(
            "<Configure>", lambda e: canvas.itemconfigure(win_id, width=e.width)
        )

        self._bind_mousewheel_to_canvas(canvas, main)

        # --- BUDOWA FORMULARZA ---
        
        self._build_form(main)

        # Zapisanie poczƒÖtkowego stanu formularza (do wykrywania zmian).
        self.initial_form_data = self._get_current_form_data()

        # --- PRZYCISKI NAWIGACJI I ZAPISU ---
        
        EXTRA_BOTTOM_MARGIN = 60  # Margines dolny
        bottom_frame = ttk.Frame(main)
        bottom_frame.pack(fill=tk.X, pady=(20, EXTRA_BOTTOM_MARGIN))
        bottom_frame.columnconfigure((0, 1, 2), weight=1)

        # Przycisk "Poprzedni".
        self.prev_btn = ttk.Button(
            bottom_frame, text="<< Poprzedni", command=lambda: self._navigate(-1)
        )
        self.prev_btn.grid(row=0, column=0, sticky="ew", padx=(0, 5))

        # Przycisk "Zapisz".
        save_btn = ttk.Button(
            bottom_frame, text="Zapisz", command=self.save, style="Success.TButton"
        )
        save_btn.grid(row=0, column=1, sticky="ew", ipady=6)

        # Przycisk "Nastƒôpny".
        self.next_btn = ttk.Button(
            bottom_frame, text="Nastƒôpny >>", command=lambda: self._navigate(1)
        )
        self.next_btn.grid(row=0, column=2, sticky="ew", padx=(5, 0))

        # Aktualizacja stanu przycisk√≥w nawigacji.
        self._update_nav_buttons_state()
        
        # Bindowanie klawisza Escape do zamkniƒôcia okna.
        self.bind("<Escape>", lambda e: self.destroy())

    # --- METODY POMOCNICZE POZYCJONOWANIA ---

    def _center_or_maximize(self, percent=0.9):
        """
        Centruje okno na ekranie lub maksymalizuje na Windows.
        
        Args:
            percent: Procent szeroko≈õci/wysoko≈õci ekranu do wykorzystania
        """
        sw, sh = self.winfo_screenwidth(), self.winfo_screenheight()
        w, h = int(sw * percent), int(sh * percent)
        self.geometry(f"{w}x{h}+{(sw - w)//2}+{(sh - h)//2}")
        self.minsize(800, 600)
        if platform.system() == "Windows":
            self.state("zoomed")

    def _bind_mousewheel_to_canvas(self, canvas, main_frame):
        """
        Binduje scroll myszkƒÖ do canvas niezale≈ºnie od tego, gdzie jest kursor.
        Dzia≈Ça globalnie w ca≈Çym oknie edycji.
        """
        def _on_mousewheel(event):
            if canvas.winfo_exists():
                if platform.system() == 'Windows':
                    canvas.yview_scroll(int(-1*(event.delta/120)), "units")
                else:
                    canvas.yview_scroll(int(-1*event.delta), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
            canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
            canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
            canvas.unbind_all("<Button-4>")
            canvas.unbind_all("<Button-5>")
        
        self.bind("<Enter>", _bind_to_mousewheel)
        self.bind("<Leave>", _unbind_from_mousewheel)
        main_frame.bind("<Enter>", _bind_to_mousewheel)

    # --- METODY NAWIGACJI MIƒòDZY WPISAMI ---

    def _navigate(self, direction):
        """
        Przechodzi do poprzedniego lub nastƒôpnego w≈Ça≈õciciela.
        Pyta o zapis niezapisanych zmian.
        
        Args:
            direction: -1 dla poprzedniego, 1 dla nastƒôpnego
        """
        # Sprawdzenie, czy sƒÖ niezapisane zmiany.
        current_data = self._get_current_form_data()
        if current_data != self.initial_form_data:
            answer = messagebox.askyesnocancel(
                "Nawigacja",
                "Wykryto niezapisane zmiany. Czy chcesz je zapisaƒá przed przej≈õciem dalej?",
                parent=self,
            )
            if answer is None:  # Anuluj
                return
            if answer is True:  # Tak - zapisz
                if not self.save(close_after=False):
                    return  # Przerwij, je≈õli zapis siƒô nie powi√≥d≈Ç

        # Znalezienie nowego indeksu.
        try:
            current_index = self.sorted_keys.index(self.original_key)
        except ValueError:
            messagebox.showwarning(
                "B≈ÇƒÖd nawigacji",
                "Nie mo≈ºna odnale≈∫ƒá bie≈ºƒÖcego wpisu na li≈õcie.",
                parent=self,
            )
            return

        new_index = current_index + direction
        next_key = self.sorted_keys[new_index]
        next_data = self.master.data[next_key]

        # Za≈Çadowanie nowych danych.
        self._load_data(next_data, next_key)

        # Zaktualizowanie migawki stanu.
        self.initial_form_data = self._get_current_form_data()

    def _load_data(self, owner_data, key):
        """
        ≈Åaduje dane w≈Ça≈õciciela do formularza.
        
        Args:
            owner_data: S≈Çownik z danymi w≈Ça≈õciciela
            key: Unikalny klucz w≈Ça≈õciciela
        """
        self.owner_data = owner_data
        self.original_key = key

        # Wype≈Çnienie wszystkich p√≥l formularza.
        for f_key, widget in self.fields.items():
            value = owner_data.get(f_key, "")
            if f_key == "unikalny_klucz":
                value = key

            # R√≥≈ºne typy p√≥l wymagajƒÖ r√≥≈ºnego sposobu wype≈Çniania.
            if isinstance(widget, tuple):  # Pole daty (3 osobne pola)
                day, month, year = "", "", ""
                if value:
                    match = re.match(
                        r"(\d+)\s+([a-zA-Zƒô√≥ƒÖ≈õ≈Ç≈º≈∫ƒá≈Ñ]+)\s+(\d{4})", str(value).strip()
                    )
                    if match:
                        day, month, year = match.groups()
                widget[0].delete(0, tk.END)
                widget[0].insert(0, day)
                widget[1].delete(0, tk.END)
                widget[1].insert(0, month)
                widget[2].delete(0, tk.END)
                widget[2].insert(0, year)
            elif isinstance(widget, scrolledtext.ScrolledText):  # Pola tekstowe
                widget.delete("1.0", tk.END)
                # Specjalna obs≈Çuga dla list dzia≈Çek.
                if "Plots" in f_key and isinstance(value, list):
                    value = self.format_plots_for_display(value)
                widget.insert("1.0", str(value))
            else:  # Zwyk≈Çe pola Entry
                widget.delete(0, tk.END)
                widget.insert(0, str(value))

        # Aktualizacja tytu≈Çu okna.
        self.title(f"Edycja Danych - {owner_data.get('ownerName', key)}")
        
        # Od≈õwie≈ºenie sekcji skan√≥w i przycisk√≥w.
        self._check_key_and_enable_scans()
        self._update_nav_buttons_state()

    def _update_nav_buttons_state(self):
        """W≈ÇƒÖcza/wy≈ÇƒÖcza przyciski nawigacji w zale≈ºno≈õci od pozycji na li≈õcie."""
        try:
            current_index = self.sorted_keys.index(self.original_key)
            self.prev_btn.config(state=tk.NORMAL if current_index > 0 else tk.DISABLED)
            self.next_btn.config(
                state=(
                    tk.NORMAL
                    if current_index < len(self.sorted_keys) - 1
                    else tk.DISABLED
                )
            )
        except (ValueError, AttributeError):
            # Nowy wpis - wy≈ÇƒÖcz oba przyciski.
            self.prev_btn.config(state=tk.DISABLED)
            self.next_btn.config(state=tk.DISABLED)

    # --- METODY BUDOWANIA FORMULARZA ---

    def _build_form(self, parent):
        """
        Tworzy wszystkie pola formularza w podanym kontenerze.
        
        Args:
            parent: Kontener dla p√≥l formularza
        """
        
        # --- SEKCJA IDENTYFIKATORA ---
        
        key_frame = ttk.LabelFrame(parent, text="Identyfikator", padding=10)
        key_frame.pack(fill=tk.X, pady=5)
        self.create_field(
            key_frame, "unikalny_klucz", "Unikalny klucz:", self.original_key or ""
        )

        # --- SEKCJA DANYCH W≈ÅA≈öCICIELA ---
        
        details_frame = ttk.LabelFrame(parent, text="Dane W≈Ça≈õciciela", padding=10)
        details_frame.pack(fill=tk.X, pady=5)
        
        self.create_field(
            details_frame, "orderNumber", "Lp:", self.owner_data.get("orderNumber", "")
        )
        self.create_field(
            details_frame,
            "ownerName",
            "Imiƒô i Nazwisko:",
            self.owner_data.get("ownerName", ""),
        )
        self.create_date_field(
            details_frame,
            "protocolDate",
            "Data protoko≈Çu:",
            self.owner_data.get("protocolDate", ""),
        )
        self.create_field(
            details_frame,
            "houseNumber",
            "Numer domu:",
            self.owner_data.get("houseNumber", ""),
        )
        self.create_field(
            details_frame,
            "protocolLocation",
            "Miejsce protoko≈Çu:",
            self.owner_data.get("protocolLocation", ""),
        )

        # --- SEKCJA DZIA≈ÅEK ---
        
        plots_frame = ttk.LabelFrame(
            parent, text="Dzia≈Çki (numery oddzielone przecinkami)", padding=10
        )
        plots_frame.pack(fill=tk.X, pady=5)
        
        self.create_textarea(
            plots_frame,
            "buildingPlots",
            "Dzia≈Çki budowlane (z protoko≈Çu):",
            self.format_plots_for_display(self.owner_data.get("buildingPlots", [])),
            height=2,
        )
        self.create_textarea(
            plots_frame,
            "agriculturalPlots",
            "Dzia≈Çki rolne (z protoko≈Çu):",
            self.format_plots_for_display(self.owner_data.get("agriculturalPlots", [])),
            height=2,
        )
        self.create_textarea(
            plots_frame,
            "realbuildingPlots",
            "Dzia≈Çki budowlane (rzeczywiste):",
            self.format_plots_for_display(self.owner_data.get("realbuildingPlots", [])),
            height=2,
        )
        self.create_textarea(
            plots_frame,
            "realagriculturalPlots",
            "Dzia≈Çki rolne (rzeczywiste):",
            self.format_plots_for_display(
                self.owner_data.get("realagriculturalPlots", [])
            ),
            height=2,
        )

        # --- SEKCJA DODATKOWYCH INFORMACJI ---
        
        notes_frame = ttk.LabelFrame(parent, text="Dodatkowe Informacje", padding=10)
        notes_frame.pack(fill=tk.X, pady=5)
        
        self.create_textarea(
            notes_frame,
            "genealogy",
            "Genealogia:",
            self.owner_data.get("genealogy", ""),
            height=4,
        )
        self.create_textarea(
            notes_frame,
            "ownershipHistory",
            "Historia posiadania dzia≈Çek:",
            self.owner_data.get("ownershipHistory", ""),
            height=4,
        )
        self.create_textarea(
            notes_frame,
            "remarks",
            "CiƒÖg dalszy/Uwagi:",
            self.owner_data.get("remarks", ""),
            height=4,
        )
        self.create_textarea(
            notes_frame,
            "wspolwlasnosc",
            "Wsp√≥≈Çw≈Çasno≈õƒá/S≈Çu≈ºebno≈õƒá:",
            self.owner_data.get("wspolwlasnosc", ""),
            height=4,
        )

        # --- POLE POWIƒÑZA≈É Z TOOLTIPEM ---
        
        relacje_frame = ttk.Frame(notes_frame)
        relacje_frame.pack(fill=tk.X, pady=4)
        relacje_frame.columnconfigure(0, weight=1)
        relacje_frame.rowconfigure(1, weight=1)

        # Etykieta z ikonƒÖ pomocy.
        label_icon_frame = ttk.Frame(relacje_frame)
        label_icon_frame.grid(row=0, column=0, columnspan=2, sticky="w")
        ttk.Label(label_icon_frame, text="PowiƒÖzania i transakcje").pack(
            side=tk.LEFT, anchor="w"
        )
        
        # Ikona pomocy "?".
        help_icon = ttk.Label(
            label_icon_frame, text="?", cursor="hand2", font=("Segoe UI", 10, "bold")
        )
        help_icon.pack(side=tk.LEFT, anchor="w", padx=5)
        help_icon.bind("<Button-1>", self.toggle_relacje_tooltip)

        self.tooltip_window = None
        
        # Pole tekstowe dla powiƒÖza≈Ñ.
        relacje_content = self.owner_data.get(
            "powiazania_i_transakcje", self.owner_data.get("relacje_rodzinne", "")
        )
        txt_frame, self.fields["powiazania_i_transakcje"] = (
            self.create_textarea_in_frame(relacje_frame, relacje_content, height=4)
        )
        txt_frame.grid(row=1, column=0, columnspan=2, sticky="nsew")

        # --- SEKCJA ANALIZY ---
        
        analysis_frame = ttk.LabelFrame(parent, text="Analiza", padding=10)
        analysis_frame.pack(fill=tk.X, pady=5)
        self.create_textarea(
            analysis_frame,
            "interpretacja_i_wnioski",
            "Interpretacja i wnioski:",
            self.owner_data.get("interpretacja_i_wnioski", ""),
            height=6,
        )

        # --- SEKCJA ZARZƒÑDZANIA SKANAMI ---
        
        scans_frame = ttk.LabelFrame(
            parent, text="ZarzƒÖdzanie Skanami Protok√≥≈Çu", padding=10
        )
        scans_frame.pack(fill=tk.BOTH, expand=True, pady=5)

        # Utworzenie interfejsu skan√≥w.
        self.create_scans_section(scans_frame)

        # Dynamiczne w≈ÇƒÖczanie/wy≈ÇƒÖczanie sekcji skan√≥w.
        self._check_key_and_enable_scans()
        self.fields["unikalny_klucz"].bind(
            "<KeyRelease>", self._check_key_and_enable_scans
        )

    # --- METODY SPRAWDZANIA I AKTYWACJI SEKCJI SKAN√ìW ---

    def _check_key_and_enable_scans(self, event=None):
        """
        Sprawdza, czy unikalny klucz jest wpisany i na tej podstawie
        aktywuje lub deaktywuje sekcjƒô zarzƒÖdzania skanami.
        
        Args:
            event: Zdarzenie klawiatury (opcjonalne)
        """
        # Pobranie warto≈õci klucza z pola formularza.
        key = self.fields["unikalny_klucz"].get().strip()
        is_enabled = bool(key)

        # Okre≈õlenie nowego stanu widget√≥w.
        new_state = tk.NORMAL if is_enabled else tk.DISABLED

        # Aktualizacja stanu wszystkich widget√≥w zarzƒÖdzania skanami.
        for widget in self.scans_widgets.values():
            if isinstance(widget, (ttk.Button, tk.Listbox)):
                widget.config(state=new_state)

        if is_enabled:
            # Je≈õli sekcja jest aktywna, od≈õwie≈º listƒô plik√≥w.
            self.populate_scans_list()
        else:
            # Je≈õli sekcja jest nieaktywna, wyczy≈õƒá listƒô.
            self.scans_widgets["listbox"].delete(0, tk.END)

    # --- METODY TWORZENIA P√ìL FORMULARZA ---

    def create_textarea_in_frame(self, parent, initial_content, height):
        """
        Tworzy pole tekstowe ScrolledText w osobnej ramce.
        U≈ºywane dla p√≥l wymagajƒÖcych specjalnego uk≈Çadu.
        
        Args:
            parent: Widget rodzica
            initial_content: PoczƒÖtkowa zawarto≈õƒá pola
            height: Wysoko≈õƒá pola w liniach
            
        Returns:
            tuple: (ramka, widget ScrolledText)
        """
        # Utworzenie ramki kontenerowej.
        txt_frame = ttk.Frame(parent)

        # Zwiƒôkszenie rozmiaru czcionki dla lepszej czytelno≈õci.
        bigger = tkfont.nametofont("TkTextFont").cget("size") + 2
        
        # Utworzenie pola tekstowego z przewijaniem.
        txt = scrolledtext.ScrolledText(
            txt_frame,
            height=height,
            wrap=tk.WORD,  # Zawijanie po s≈Çowach
            relief=tk.SOLID,
            borderwidth=1,
            font=("Segoe UI", bigger),
        )
        
        # Wstawienie poczƒÖtkowej zawarto≈õci z konwersjƒÖ \n.
        txt.insert("1.0", initial_content.replace("\\n", "\n"))
        txt.pack(fill=tk.BOTH, expand=True)

        return txt_frame, txt

    def create_scans_section(self, parent):
        """
        Tworzy kompletny interfejs do zarzƒÖdzania skanami dokument√≥w.
        Zawiera listƒô plik√≥w, przyciski do dodawania/usuwania
        oraz przyciski do zmiany kolejno≈õci.
        
        Args:
            parent: Widget rodzica dla sekcji skan√≥w
        """
        # Konfiguracja uk≈Çadu grid dla rodzica.
        parent.grid_columnconfigure(0, weight=1)
        parent.grid_rowconfigure(0, weight=1)

        # G≈Ç√≥wna ramka dla listy skan√≥w.
        list_frame = ttk.Frame(parent)
        list_frame.pack(fill=tk.BOTH, expand=True)

        # --- PRZYCISKI ZMIANY KOLEJNO≈öCI ---
        
        reorder_frame = ttk.Frame(list_frame)
        reorder_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))

        # Przycisk przesuniƒôcia w g√≥rƒô.
        up_btn = ttk.Button(reorder_frame, text="‚ñ≤", command=self.move_scan_up, width=3)
        up_btn.pack(pady=2)
        
        # Przycisk przesuniƒôcia w d√≥≈Ç.
        down_btn = ttk.Button(
            reorder_frame, text="‚ñº", command=self.move_scan_down, width=3
        )
        down_btn.pack(pady=2)
        
        # Zapisanie referencji do przycisk√≥w.
        self.scans_widgets["up_btn"] = up_btn
        self.scans_widgets["down_btn"] = down_btn

        # --- LISTA SKAN√ìW ---
        
        listbox = tk.Listbox(list_frame, selectmode=tk.SINGLE)
        listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Bindowanie podw√≥jnego klikniƒôcia do otwierania pliku.
        listbox.bind("<Double-1>", self.open_selected_scan)
        self.scans_widgets["listbox"] = listbox

        # Pasek przewijania dla listy.
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=listbox.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        listbox.config(yscrollcommand=scrollbar.set)

        # --- PRZYCISKI AKCJI ---
        
        btn_frame = ttk.Frame(parent)
        btn_frame.pack(fill=tk.X, pady=5)

        # Przycisk dodawania skan√≥w.
        add_btn = ttk.Button(btn_frame, text="Dodaj skany...", command=self.add_scans)
        add_btn.pack(side=tk.LEFT)
        self.scans_widgets["add_btn"] = add_btn

        # Przycisk usuwania zaznaczonego skanu.
        remove_btn = ttk.Button(
            btn_frame,
            text="Usu≈Ñ zaznaczony",
            command=self.remove_selected_scan,
            style="Danger.TButton",
        )
        remove_btn.pack(side=tk.LEFT, padx=5)
        self.scans_widgets["remove_btn"] = remove_btn

    # --- METODY ZARZƒÑDZANIA KOLEJNO≈öCIƒÑ SKAN√ìW ---

    def move_scan_up(self):
        """
        Przesuwa zaznaczony skan o jednƒÖ pozycjƒô w g√≥rƒô na li≈õcie.
        Zmiana kolejno≈õci jest zachowywana przy zapisie.
        """
        listbox = self.scans_widgets["listbox"]
        selected_indices = listbox.curselection()
        
        if not selected_indices:
            return

        idx = selected_indices[0]
        
        # Sprawdzenie, czy mo≈ºna przesunƒÖƒá w g√≥rƒô.
        if idx > 0:
            # Pobranie tekstu zaznaczonego elementu.
            text = listbox.get(idx)
            
            # Usuniƒôcie z bie≈ºƒÖcej pozycji.
            listbox.delete(idx)
            
            # Wstawienie o jednƒÖ pozycjƒô wy≈ºej.
            listbox.insert(idx - 1, text)
            
            # Przywr√≥cenie zaznaczenia.
            listbox.selection_set(idx - 1)
            listbox.activate(idx - 1)

    def move_scan_down(self):
        """
        Przesuwa zaznaczony skan o jednƒÖ pozycjƒô w d√≥≈Ç na li≈õcie.
        Zmiana kolejno≈õci jest zachowywana przy zapisie.
        """
        listbox = self.scans_widgets["listbox"]
        selected_indices = listbox.curselection()
        
        if not selected_indices:
            return

        idx = selected_indices[0]
        
        # Sprawdzenie, czy mo≈ºna przesunƒÖƒá w d√≥≈Ç.
        if idx < listbox.size() - 1:
            # Pobranie tekstu zaznaczonego elementu.
            text = listbox.get(idx)
            
            # Usuniƒôcie z bie≈ºƒÖcej pozycji.
            listbox.delete(idx)
            
            # Wstawienie o jednƒÖ pozycjƒô ni≈ºej.
            listbox.insert(idx + 1, text)
            
            # Przywr√≥cenie zaznaczenia.
            listbox.selection_set(idx + 1)
            listbox.activate(idx + 1)

    # --- METODY POBIERANIA STANU FORMULARZA ---

    def _get_current_form_data(self):
        """
        Zbiera aktualne dane ze wszystkich p√≥l formularza.
        U≈ºywane do wykrywania niezapisanych zmian.
        
        Returns:
            dict: S≈Çownik z aktualnymi danymi formularza
        """
        current_data = {}
        
        # Iteracja przez wszystkie pola formularza.
        for key, widget in self.fields.items():
            if isinstance(widget, tuple):  # Pole daty (3 komponenty)
                day, month, year = widget[0].get(), widget[1].get(), widget[2].get()
                current_data[key] = (
                    f"{day} {month} {year} rok" if day and month and year else ""
                )
            elif isinstance(widget, scrolledtext.ScrolledText):  # Pole tekstowe
                current_data[key] = widget.get("1.0", tk.END).strip()
            else:  # Zwyk≈Çe pole Entry
                current_data[key] = widget.get().strip()

        # Przetworzenie p√≥l dzia≈Çek na listy.
        for key in [
            "buildingPlots",
            "agriculturalPlots",
            "realbuildingPlots",
            "realagriculturalPlots",
        ]:
            current_data[key] = self.parse_plots_from_string(current_data.get(key, ""))

        return current_data

    # --- METODY OTWIERANIA PLIK√ìW SKAN√ìW ---

    def open_selected_scan(self, event):
        """
        Otwiera zaznaczony plik skanu w domy≈õlnej aplikacji systemowej.
        
        Args:
            event: Zdarzenie podw√≥jnego klikniƒôcia
        """
        listbox = self.scans_widgets["listbox"]
        selected_indices = listbox.curselection()
        
        if not selected_indices:
            return

        # Pobranie nazwy pliku do otwarcia.
        filename_to_open = listbox.get(selected_indices[0])

        # Pobranie ≈õcie≈ºki do folderu ze skanami.
        folder_path = self.get_scans_folder_path()
        if not folder_path:
            return

        file_path = os.path.join(folder_path, filename_to_open)

        if os.path.exists(file_path):
            try:
                # Otwarcie pliku w domy≈õlnej aplikacji (Windows).
                os.startfile(file_path)
            except Exception as e:
                messagebox.showerror(
                    "B≈ÇƒÖd otwierania pliku",
                    f"Nie mo≈ºna otworzyƒá pliku: {file_path}\nB≈ÇƒÖd: {e}",
                )
        else:
            messagebox.showwarning(
                "Plik nie istnieje", f"Plik '{filename_to_open}' nie zosta≈Ç znaleziony."
            )

    # --- METODY ZARZƒÑDZANIA TOOLTIPAMI ---

    def close_tooltip_if_exists(self, event=None):
        """
        Bezpiecznie zamyka okno podpowiedzi, je≈õli istnieje.
        
        Args:
            event: Zdarzenie (opcjonalne)
        """
        if self.tooltip_window:
            self.tooltip_window.destroy()
            self.tooltip_window = None

    def toggle_relacje_tooltip(self, event):
        """
        Pokazuje lub ukrywa okno podpowiedzi dla pola powiƒÖza≈Ñ rodzinnych.
        Podpowied≈∫ wyja≈õnia sk≈Çadniƒô tworzenia link√≥w do innych protoko≈Ç√≥w.
        
        Args:
            event: Zdarzenie klikniƒôcia na ikonƒô pomocy
        """
        # Je≈õli tooltip jest ju≈º otwarty, zamknij go.
        if self.tooltip_window:
            self.close_tooltip_if_exists()
            return

        # Pobranie widgetu, kt√≥ry wywo≈Ça≈Ç zdarzenie (ikona "?").
        trigger_widget = event.widget

        # Utworzenie nowego okna tooltip.
        self.tooltip_window = tk.Toplevel(self)
        self.tooltip_window.wm_overrideredirect(True)  # Usuwa ramkƒô okna

        # Ramka z zawarto≈õciƒÖ tooltip.
        frame = ttk.Frame(
            self.tooltip_window, padding=10, relief="solid", borderwidth=1
        )
        frame.pack()

        # Nag≈Ç√≥wek instrukcji.
        ttk.Label(
            frame,
            text="Jak tworzyƒá linki do innych protoko≈Ç√≥w:",
            font=("Calibri", 10, "bold"),
        ).pack(anchor="w")
        
        # Opis sk≈Çadni.
        ttk.Label(
            frame,
            text="U≈ºyj sk≈Çadni: [[Tekst widoczny|KluczUnikalny]]",
            foreground="gray",
        ).pack(anchor="w", pady=(0, 5))
        
        ttk.Separator(frame).pack(fill="x", pady=5)
        ttk.Label(frame, text="Przyk≈Çad:").pack(anchor="w")

        # Przyk≈Çad kodu.
        code_label = ttk.Label(
            frame,
            text="≈ªona: [[Anna Micek|Anna_Micek]]",
            background="#e9ecef",
            padding=5,
            relief="solid",
            borderwidth=1,
        )
        code_label.pack(anchor="w", fill="x", pady=2)

        # Pozycjonowanie tooltip wzglƒôdem ikony pomocy.
        x = trigger_widget.winfo_rootx()
        y = trigger_widget.winfo_rooty()
        
        # Ustaw pozycjƒô 155px powy≈ºej ikony.
        self.tooltip_window.geometry(f"+{x}+{y - 155}")

        # Zamkniƒôcie tooltip po klikniƒôciu poza nim.
        self.tooltip_window.bind("<FocusOut>", self.close_tooltip_if_exists)
        self.tooltip_window.focus_set()

    # --- METODY TWORZENIA PODSTAWOWYCH P√ìL FORMULARZA ---

    def create_field(self, parent, key, label_text, initial_value):
        """
        Tworzy standardowe pole tekstowe Entry z etykietƒÖ.
        
        Args:
            parent: Widget rodzica
            key: Klucz pola (do zapisania w self.fields)
            label_text: Tekst etykiety
            initial_value: PoczƒÖtkowa warto≈õƒá pola
        """
        # Ramka dla pola.
        frame = ttk.Frame(parent)
        frame.pack(fill=tk.X, pady=4)
        
        # Etykieta po lewej stronie.
        ttk.Label(frame, text=label_text).pack(side=tk.LEFT, anchor="w", padx=(0, 10))
        
        # Pole tekstowe.
        entry = ttk.Entry(frame)
        entry.insert(0, str(initial_value))
        entry.pack(fill=tk.X, expand=True)
        
        # Zapisanie referencji do pola.
        self.fields[key] = entry

    def create_date_field(self, parent, key, label_text, initial_value):
        """
        Tworzy specjalne pole do wprowadzania daty.
        Sk≈Çada siƒô z trzech osobnych p√≥l: dzie≈Ñ, miesiƒÖc (s≈Çownie), rok.
        
        Args:
            parent: Widget rodzica
            key: Klucz pola (do zapisania w self.fields)
            label_text: Tekst etykiety
            initial_value: PoczƒÖtkowa warto≈õƒá daty jako string
        """
        # G≈Ç√≥wna ramka dla ca≈Çego pola daty.
        main_date_frame = ttk.Frame(parent)
        main_date_frame.pack(fill=tk.X, pady=4)

        # Etykieta g≈Ç√≥wna.
        ttk.Label(main_date_frame, text=label_text).pack(
            side=tk.LEFT, anchor="n", padx=(0, 10)
        )

        # Ramka na poszczeg√≥lne komponenty daty.
        fields_frame = ttk.Frame(main_date_frame)
        fields_frame.pack(fill=tk.X, expand=True)

        # Parsowanie istniejƒÖcej daty.
        day, month, year = "", "", ""
        if initial_value:
            # Obs≈Çuga formatu "DD miesiƒÖc YYYY rok".
            match = re.match(
                r"(\d+)\s+([a-zA-Zƒô√≥ƒÖ≈õ≈Ç≈º≈∫ƒá≈Ñ]+)\s+(\d{4})(?:\s+rok)?",
                initial_value.strip(),
            )
            if match:
                day, month, year = match.groups()

        # --- POLE DZIE≈É ---
        
        day_frame = ttk.Frame(fields_frame)
        day_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        ttk.Label(day_frame, text="Dzie≈Ñ").pack(anchor="w")
        day_entry = ttk.Entry(day_frame)
        day_entry.insert(0, day)
        day_entry.pack(fill=tk.X)

        # --- POLE MIESIƒÑC ---
        
        month_frame = ttk.Frame(fields_frame)
        month_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        ttk.Label(month_frame, text="MiesiƒÖc (s≈Çownie)").pack(anchor="w")
        month_entry = ttk.Entry(month_frame)
        month_entry.insert(0, month)
        month_entry.pack(fill=tk.X)

        # --- POLE ROK ---
        
        year_frame = ttk.Frame(fields_frame)
        year_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        ttk.Label(year_frame, text="Rok").pack(anchor="w")
        year_entry = ttk.Entry(year_frame)
        year_entry.insert(0, year)
        year_entry.pack(fill=tk.X)

        # Zapisanie referencji do wszystkich trzech p√≥l jako krotki.
        self.fields[key] = (day_entry, month_entry, year_entry)

    def create_textarea(self, parent, key, label, initial="", *, height=3):
        """
        Tworzy du≈ºe pole tekstowe ScrolledText z przyciskiem "Powiƒôksz".
        
        Args:
            parent: Widget rodzica
            key: Klucz pola (do zapisania w self.fields)
            label: Tekst etykiety
            initial: PoczƒÖtkowa zawarto≈õƒá
            height: Wysoko≈õƒá pola w liniach
        """
        # Ramka g≈Ç√≥wna dla etykiety i przycisku.
        row = ttk.Frame(parent)
        row.pack(fill=tk.X, pady=4)

        header = ttk.Frame(row)
        header.pack(fill=tk.X)

        # Etykieta pola.
        ttk.Label(header, text=label).pack(side=tk.LEFT, anchor="w")

        # Przycisk otwierajƒÖcy du≈ºe okno edycji.
        expand_btn = ttk.Button(
            header, text="Powiƒôksz", command=lambda: self._open_text_popup(txt, label)
        )
        expand_btn.pack(side=tk.RIGHT)

        # Zwiƒôkszona czcionka dla lepszej czytelno≈õci.
        bigger = tkfont.nametofont("TkTextFont").cget("size") + 2

        # W≈Ça≈õciwe pole tekstowe.
        txt = scrolledtext.ScrolledText(
            row,
            height=height,
            wrap=tk.WORD,
            relief=tk.SOLID,
            borderwidth=1,
            font=("Segoe UI", bigger),
        )
        
        # Wstawienie poczƒÖtkowej zawarto≈õci.
        txt.insert("1.0", initial.replace("\\n", "\n"))
        txt.pack(fill=tk.X, expand=True, pady=(2, 0))

        # Zapisanie referencji.
        self.fields[key] = txt

    def _open_text_popup(self, original_widget, title="Edytuj tekst"):
        """
        Otwiera du≈ºe okno popup do wygodnej edycji d≈Çugiego tekstu.
        Po zapisie, tre≈õƒá wraca do oryginalnego pola.
        
        Args:
            original_widget: Widget ≈∫r√≥d≈Çowy (ScrolledText)
            title: Tytu≈Ç okna popup
        """
        # Utworzenie nowego okna popup.
        popup = tk.Toplevel(self)
        popup.title(title)
        popup.transient(self)
        popup.grab_set()

        # Ustawienie rozmiaru na 80% ekranu.
        sw, sh = popup.winfo_screenwidth(), popup.winfo_screenheight()
        w, h = int(sw * 0.8), int(sh * 0.8)
        popup.geometry(f"{w}x{h}+{(sw-w)//2}+{(sh-h)//2}")

        # Du≈ºe pole tekstowe z wiƒôkszƒÖ czcionkƒÖ.
        big_font = ("Segoe UI", tkfont.nametofont("TkTextFont").cget("size") + 4)

        txt = scrolledtext.ScrolledText(
            popup, wrap=tk.WORD, font=big_font, relief=tk.SOLID, borderwidth=1
        )
        txt.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Skopiowanie zawarto≈õci z oryginalnego pola.
        txt.insert("1.0", original_widget.get("1.0", tk.END))

        # Pasek przycisk√≥w.
        btn_bar = ttk.Frame(popup)
        btn_bar.pack(fill=tk.X, pady=5, padx=10)

        def _save_and_close():
            """Zapisuje zmiany i zamyka popup."""
            original_widget.delete("1.0", tk.END)
            original_widget.insert("1.0", txt.get("1.0", tk.END).rstrip())
            popup.destroy()

        # Przycisk zapisania.
        ttk.Button(
            btn_bar, text="Zapisz", style="Accent.TButton", command=_save_and_close
        ).pack(side=tk.RIGHT, padx=5)
        
        # Przycisk anulowania.
        ttk.Button(btn_bar, text="Anuluj", command=popup.destroy).pack(side=tk.RIGHT)

    # --- METODY ZARZƒÑDZANIA PLIKAMI SKAN√ìW ---

    def get_scans_folder_path(self):
        """
        Zwraca ≈õcie≈ºkƒô do folderu ze skanami dla bie≈ºƒÖcego w≈Ça≈õciciela.
        NIE tworzy folderu - tylko oblicza ≈õcie≈ºkƒô.
        
        Returns:
            str: ≈öcie≈ºka do folderu lub None je≈õli brak klucza
        """
        current_key = self.fields["unikalny_klucz"].get().strip()
        if not current_key:
            return None

        return os.path.join(script_dir, "..", "assets", "protokoly", current_key)

    def populate_scans_list(self):
        """
        Wype≈Çnia listƒô istniejƒÖcymi plikami skan√≥w.
        Sortuje pliki numerycznie (1.jpg, 2.jpg, ..., 10.jpg).
        """
        listbox = self.scans_widgets["listbox"]
        listbox.delete(0, tk.END)

        folder_path = self.get_scans_folder_path()
        if folder_path and os.path.exists(folder_path):
            try:
                # Sortowanie numeryczne plik√≥w.
                files = sorted(
                    os.listdir(folder_path),
                    key=lambda x: (
                        int(os.path.splitext(x)[0])
                        if x.replace(".jpg", "").isdigit()
                        else 999
                    ),
                )
                
                # Dodanie plik√≥w JPG do listy.
                for filename in files:
                    if filename.lower().endswith(".jpg"):
                        listbox.insert(tk.END, filename)
            except Exception as e:
                print(f"B≈ÇƒÖd odczytu folderu ze skanami: {e}")

    def add_scans(self):
        """
        Otwiera dialog wyboru plik√≥w i kopiuje wybrane skany
        do folderu protoko≈Çu. Automatycznie numeruje pliki.
        """
        folder_path = self.get_scans_folder_path()
        if not folder_path:
            messagebox.showwarning(
                "Brak klucza", "Wpisz i zatwierd≈∫ unikalny klucz, aby dodaƒá skany."
            )
            return

        # Upewnienie siƒô, ≈ºe folder docelowy istnieje.
        try:
            os.makedirs(folder_path, exist_ok=True)
        except OSError as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie mo≈ºna utworzyƒá folderu dla skan√≥w:\n{e}")
            return

        # Dialog wyboru plik√≥w.
        files_to_add = filedialog.askopenfilenames(
            title="Wybierz pliki JPG do dodania", 
            filetypes=[("Obrazy JPG", "*.jpg")]
        )
        
        if not files_to_add:
            return

        # Kopiowanie wybranych plik√≥w z automatycznƒÖ numeracjƒÖ.
        for source_path in files_to_add:
            # Znalezienie najwy≈ºszego istniejƒÖcego numeru.
            existing_numbers = [
                int(os.path.splitext(f)[0])
                for f in os.listdir(folder_path)
                if f.replace(".jpg", "").isdigit()
            ]
            next_num = max(existing_numbers) + 1 if existing_numbers else 1

            # Okre≈õlenie nazwy docelowej.
            dest_filename = f"{next_num}.jpg"
            dest_path = os.path.join(folder_path, dest_filename)

            try:
                shutil.copy(source_path, dest_path)
            except Exception as e:
                messagebox.showerror(
                    "B≈ÇƒÖd kopiowania",
                    f"Nie uda≈Ço siƒô skopiowaƒá pliku: {source_path}\nB≈ÇƒÖd: {e}",
                )
                break

        # Od≈õwie≈ºenie listy plik√≥w.
        self.populate_scans_list()

    def remove_selected_scan(self):
        """
        Usuwa zaznaczony plik skanu z folderu.
        Wymaga potwierdzenia u≈ºytkownika.
        """
        listbox = self.scans_widgets["listbox"]
        selected_indices = listbox.curselection()
        
        if not selected_indices:
            messagebox.showwarning("Brak zaznaczenia", "Zaznacz skan do usuniƒôcia.")
            return

        filename_to_delete = listbox.get(selected_indices[0])

        # Potwierdzenie usuniƒôcia.
        if messagebox.askyesno(
            "Potwierdzenie", f"Czy na pewno chcesz usunƒÖƒá plik '{filename_to_delete}'?"
        ):
            folder_path = self.get_scans_folder_path()
            file_path = os.path.join(folder_path, filename_to_delete)
            
            try:
                os.remove(file_path)
                self.populate_scans_list()
            except Exception as e:
                messagebox.showerror(
                    "B≈ÇƒÖd usuwania", f"Nie uda≈Ço siƒô usunƒÖƒá pliku: {e}"
                )

    # --- METODY FORMATOWANIA I PARSOWANIA DANYCH ---

    def format_plots_for_display(self, plots):
        """
        Formatuje listƒô dzia≈Çek do wy≈õwietlenia w polu tekstowym.
        Konwertuje obiekty dict na format "numerator/denominator".
        
        Args:
            plots: Lista dzia≈Çek (stringi lub s≈Çowniki)
            
        Returns:
            str: Sformatowany string z numerami dzia≈Çek
        """
        if not plots:
            return ""
            
        formatted_list = []
        for p in plots:
            if isinstance(p, dict):
                # Obs≈Çuga starszego formatu z liter√≥wkƒÖ "numarator".
                num = p.get("numerator") or p.get("numarator", "?")
                den = p.get("denominator", "?")
                formatted_list.append(f"{num}/{den}")
            else:
                formatted_list.append(str(p))
                
        return ", ".join(formatted_list)

    def parse_plots_from_string(self, text):
        """
        Parsuje string z numerami dzia≈Çek na listƒô.
        Rozpoznaje format "numerator/denominator" i zwyk≈Çe numery.
        
        Args:
            text: String z numerami dzia≈Çek oddzielonymi przecinkami
            
        Returns:
            list: Lista dzia≈Çek jako stringi lub s≈Çowniki
        """
        if not text.strip():
            return []
            
        parsed_plots = []
        parts = text.split(",")
        
        for p in parts:
            p_clean = p.strip()
            if not p_clean:
                continue
                
            if "/" in p_clean:
                # Dzia≈Çka z u≈Çamkiem.
                num, den = p_clean.split("/", 1)
                parsed_plots.append(
                    {"numerator": num.strip(), "denominator": den.strip()}
                )
            else:
                # Zwyk≈Çy numer dzia≈Çki.
                parsed_plots.append(p_clean)
                
        return parsed_plots

    def save(self, close_after=True):
        """
        Zbiera dane z formularza, reorganizuje pliki skan√≥w i zapisuje wszystko.
        
        Args:
            close_after: Czy zamknƒÖƒá okno po zapisie (domy≈õlnie True)
            
        Returns:
            bool: True je≈õli zapis siƒô powi√≥d≈Ç, False w przypadku b≈Çƒôdu
        """
        # --- ZBIERANIE DANYCH Z FORMULARZA ---
        
        saved_data = {}
        for key, widget in self.fields.items():
            if isinstance(widget, tuple):  # Pole daty
                day, month, year = widget[0].get(), widget[1].get(), widget[2].get()
                saved_data[key] = (
                    f"{day} {month} {year} rok" if day and month and year else ""
                )
            elif isinstance(widget, scrolledtext.ScrolledText):  # Pole tekstowe
                saved_data[key] = widget.get("1.0", tk.END).strip()
            else:  # Zwyk≈Çe pole Entry
                saved_data[key] = widget.get().strip()

        # Parsowanie p√≥l z dzia≈Çkami.
        saved_data["buildingPlots"] = self.parse_plots_from_string(
            saved_data.get("buildingPlots", "")
        )
        saved_data["agriculturalPlots"] = self.parse_plots_from_string(
            saved_data.get("agriculturalPlots", "")
        )
        saved_data["realbuildingPlots"] = self.parse_plots_from_string(
            saved_data.get("realbuildingPlots", "")
        )
        saved_data["realagriculturalPlots"] = self.parse_plots_from_string(
            saved_data.get("realagriculturalPlots", "")
        )

        # --- REORGANIZACJA PLIK√ìW SKAN√ìW ---
        
        try:
            folder_path = self.get_scans_folder_path()
            if folder_path and os.path.exists(folder_path):
                listbox = self.scans_widgets["listbox"]
                final_order = list(listbox.get(0, tk.END))

                # Utworzenie tymczasowego folderu.
                temp_folder = os.path.join(folder_path, "_temp_reorder")
                if not os.path.exists(temp_folder):
                    os.makedirs(temp_folder)

                # Przeniesienie plik√≥w do folderu tymczasowego.
                current_files_in_folder = os.listdir(folder_path)
                for filename in final_order:
                    if filename in current_files_in_folder:
                        shutil.move(
                            os.path.join(folder_path, filename),
                            os.path.join(temp_folder, filename),
                        )

                # Przenumerowanie plik√≥w zgodnie z nowƒÖ kolejno≈õciƒÖ.
                for i, old_filename in enumerate(final_order):
                    if os.path.exists(os.path.join(temp_folder, old_filename)):
                        new_filename = f"{i + 1}.jpg"
                        shutil.move(
                            os.path.join(temp_folder, old_filename),
                            os.path.join(folder_path, new_filename),
                        )

                # Usuniƒôcie folderu tymczasowego.
                os.rmdir(temp_folder)
                
        except Exception as e:
            messagebox.showerror(
                "B≈ÇƒÖd Reorganizacji Skan√≥w",
                f"Nie uda≈Ço siƒô zmieniƒá kolejno≈õci plik√≥w skan√≥w:\n{e}",
                parent=self,
            )
            return False

        # --- WYWO≈ÅANIE CALLBACK ZAPISU ---
        
        save_successful = self.save_callback(saved_data, self.original_key)

        if not save_successful:
            return False  # Je≈õli zapis siƒô nie powi√≥d≈Ç, zosta≈Ñ w oknie

        # --- AKTUALIZACJA STANU PO ZAPISIE ---
        
        # Aktualizacja klucza, je≈õli siƒô zmieni≈Ç.
        self.original_key = saved_data.get("unikalny_klucz", self.original_key)
        
        # Pobranie zaktualizowanych danych.
        if self.original_key in self.master.data:
            self.owner_data = self.master.data[self.original_key]

        if close_after:
            # Zamkniƒôcie okna.
            self.destroy()
        else:
            # Pozostanie w oknie z od≈õwie≈ºeniem.
            self.master.refresh_treeview()
            self.sorted_keys = self.master.tree.get_children()
            self._update_nav_buttons_state()
            self.title(
                f"Edycja Danych - {self.owner_data.get('ownerName', self.original_key)}"
            )
            messagebox.showinfo("Zapisano", "Zmiany zosta≈Çy zapisane.", parent=self)
            
            # Zaktualizowanie migawki stanu.
            self.initial_form_data = self._get_current_form_data()

        return True

# --- KLASA OKNA EDYTORA DEMOGRAFII ---
class DemografiaEditorWindow(tk.Toplevel):
    """
    Okno do edycji danych demograficznych miejscowo≈õci.
    Pozwala na dodawanie, edycjƒô i usuwanie wpis√≥w demograficznych.
    """
    
    def __init__(self, parent):
        """
        Inicjalizacja okna edytora demografii.
        
        Args:
            parent: Okno rodzica (g≈Ç√≥wna aplikacja)
        """
        super().__init__(parent)
        self.transient(parent)
        self.grab_set()
        self.title("Edytor Danych Demograficznych")
        
        # Poprawione pozycjonowanie okna
        self._setup_window_geometry()

        self.data = []
        self.load_data()
        self.create_widgets()

    def _setup_window_geometry(self):
        """
        Konfiguruje geometriƒô okna z uwzglƒôdnieniem paska zada≈Ñ Windows.
        """
        # Pobierz wymiary ekranu
        sw = self.winfo_screenwidth()
        sh = self.winfo_screenheight()
        
        # Dla Windows, uwzglƒôdnij pasek zada≈Ñ (zazwyczaj 40-50px)
        if platform.system() == "Windows":
            # Rezerwuj przestrze≈Ñ na pasek zada≈Ñ
            taskbar_height = 50
            available_height = sh - taskbar_height
            
            # Ustaw okno na 85% dostƒôpnej przestrzeni
            w = int(sw * 0.85)
            h = int(available_height * 0.85)
            
            # Wycentruj okno
            x = (sw - w) // 2
            y = (available_height - h) // 2
            
            self.geometry(f"{w}x{h}+{x}+{y}")
            
            # Maksymalizuj je≈õli okno jest wiƒôksze ni≈º 1400x800
            if w > 1400 and h > 800:
                self.after(100, lambda: self.state('zoomed'))
        else:
            # Dla innych system√≥w
            w = min(int(sw * 0.8), 1200)
            h = min(int(sh * 0.8), 700)
            x = (sw - w) // 2
            y = (sh - h) // 2
            self.geometry(f"{w}x{h}+{x}+{y}")
        
        self.minsize(600, 400)

    def load_data(self):
        """Wczytuje dane demograficzne z pliku JSON."""
        try:
            if os.path.exists(DEMOGRAFIA_JSON_PATH):
                with open(DEMOGRAFIA_JSON_PATH, "r", encoding="utf-8") as f:
                    self.data = json.load(f)
        except Exception as e:
            messagebox.showerror(
                "B≈ÇƒÖd odczytu", f"Nie uda≈Ço siƒô wczytaƒá pliku demografia.json:\n{e}"
            )

    def save_data(self):
        """Zapisuje dane demograficzne do pliku JSON."""
        try:
            with open(DEMOGRAFIA_JSON_PATH, "w", encoding="utf-8") as f:
                json.dump(self.data, f, indent=4, ensure_ascii=False)
            messagebox.showinfo("Sukces", "Dane demograficzne zosta≈Çy zapisane.")
            self.destroy()
        except Exception as e:
            messagebox.showerror(
                "B≈ÇƒÖd zapisu", f"Nie uda≈Ço siƒô zapisaƒá pliku demografia.json:\n{e}"
            )

    def create_widgets(self):
        """
        Tworzy kompletny interfejs u≈ºytkownika dla edytora demografii.
        
        Struktura interfejsu:
        - Zewnƒôtrzna ramka z marginesem (zapobiega zakrywaniu przez pasek zada≈Ñ)
        - Tabela z danymi demograficznymi (Treeview)
        - Panel przycisk√≥w akcji (dodawanie, usuwanie, zapis)
        
        Margines dolny zapewnia widoczno≈õƒá wszystkich element√≥w na r√≥≈ºnych
        konfiguracjach systemu Windows z paskiem zada≈Ñ o r√≥≈ºnej wysoko≈õci.
        """
        
        # --- ZEWNƒòTRZNY KONTENER Z MARGINESEM BEZPIECZE≈ÉSTWA ---
        
        # Utworzenie zewnƒôtrznej ramki z marginesem dolnym.
        # Margines 50px zapobiega zakrywaniu przycisk√≥w przez pasek zada≈Ñ Windows.
        outer_frame = ttk.Frame(self)
        outer_frame.pack(fill=tk.BOTH, expand=True, padx=0, pady=(0, 50))
        
        # --- G≈Å√ìWNY KONTENER INTERFEJSU ---
        
        # G≈Ç√≥wny kontener wewnƒÖtrz ramki z marginesem.
        main_container = ttk.Frame(outer_frame)
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # Konfiguracja siatki grid dla elastycznego uk≈Çadu.
        # Wiersz 0 (tabela) otrzymuje ca≈ÇƒÖ dostƒôpnƒÖ przestrze≈Ñ (weight=1).
        # Wiersz 1 (przyciski) zachowuje sta≈Çy rozmiar (weight=0).
        main_container.grid_rowconfigure(0, weight=1)  # Tabela - rozciƒÖgalna
        main_container.grid_rowconfigure(1, weight=0)  # Przyciski - sta≈Ça wysoko≈õƒá
        main_container.grid_columnconfigure(0, weight=1)
        
        # --- SEKCJA TABELI Z DANYMI DEMOGRAFICZNYMI ---
        
        # Ramka z etykietƒÖ dla tabeli danych.
        tree_frame = ttk.LabelFrame(
            main_container, 
            text="Dane demograficzne", 
            padding="10"
        )
        tree_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=(10, 5))
        
        # Konfiguracja rozciƒÖgania zawarto≈õci ramki.
        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)
        
        # Kontener wewnƒôtrzny dla tabeli i pask√≥w przewijania.
        table_container = ttk.Frame(tree_frame)
        table_container.grid(row=0, column=0, sticky="nsew")
        table_container.grid_rowconfigure(0, weight=1)
        table_container.grid_columnconfigure(0, weight=1)
        
        # --- KONFIGURACJA TABELI TREEVIEW ---
        
        # Definicja kolumn tabeli demograficznej.
        columns = ("rok", "populacja", "katolicy", "zydzi", "inni", "opis")
        
        # Utworzenie widgetu Treeview do wy≈õwietlania danych tabelarycznych.
        self.tree = ttk.Treeview(
            table_container, 
            columns=columns, 
            show="headings",  # Pokazuj tylko nag≈Ç√≥wki kolumn (bez kolumny tree)
            selectmode="browse"  # Pozw√≥l na wyb√≥r tylko jednego wiersza
        )
        
        # --- KONFIGURACJA WYSOKO≈öCI WIERSZY ---
        
        # Pobranie domy≈õlnej czcionki i obliczenie odpowiedniej wysoko≈õci wiersza.
        base_font = tkfont.nametofont("TkDefaultFont")
        row_height = base_font.cget("size") * 2  # Podw√≥jna wysoko≈õƒá dla lepszej czytelno≈õci
        
        # Zastosowanie stylu z dostosowanƒÖ wysoko≈õciƒÖ wierszy.
        self.style = ttk.Style(self)
        self.style.configure("Treeview", rowheight=row_height)
        
        # --- KONFIGURACJA NAG≈Å√ìWK√ìW KOLUMN ---
        
        # Ustawienie tekst√≥w nag≈Ç√≥wk√≥w dla ka≈ºdej kolumny.
        self.tree.heading("rok", text="Rok")
        self.tree.heading("populacja", text="Populacja")
        self.tree.heading("katolicy", text="Katolicy")
        self.tree.heading("zydzi", text="≈ªydzi")
        self.tree.heading("inni", text="Inni")
        self.tree.heading("opis", text="Opis")
        
        # --- KONFIGURACJA SZEROKO≈öCI KOLUMN ---
        
        # Ustawienie szeroko≈õci kolumn z warto≈õciami minimalnymi.
        # Kolumna "opis" ma stretch=True, wiƒôc rozciƒÖga siƒô na dostƒôpnƒÖ przestrze≈Ñ.
        self.tree.column("rok", width=80, minwidth=60)
        self.tree.column("populacja", width=100, minwidth=80)
        self.tree.column("katolicy", width=100, minwidth=80)
        self.tree.column("zydzi", width=100, minwidth=80)
        self.tree.column("inni", width=100, minwidth=80)
        self.tree.column("opis", width=250, minwidth=150, stretch=True)  # Elastyczna szeroko≈õƒá
        
        # Umieszczenie tabeli w kontenerze.
        self.tree.grid(row=0, column=0, sticky="nsew")
        
        # --- PASKI PRZEWIJANIA ---
        
        # Pionowy pasek przewijania.
        vsb = ttk.Scrollbar(table_container, orient="vertical", command=self.tree.yview)
        vsb.grid(row=0, column=1, sticky="ns")
        
        # Poziomy pasek przewijania.
        hsb = ttk.Scrollbar(table_container, orient="horizontal", command=self.tree.xview)
        hsb.grid(row=1, column=0, sticky="ew")
        
        # Po≈ÇƒÖczenie pask√≥w przewijania z tabelƒÖ.
        self.tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        # Wype≈Çnienie tabeli istniejƒÖcymi danymi.
        self.populate_tree()
        
        # --- PANEL PRZYCISK√ìW AKCJI ---
        
        # Ramka na przyciski (zawsze widoczna u do≈Çu okna).
        button_frame = ttk.Frame(main_container)
        # Zwiƒôkszony padding dolny (20px) dla dodatkowej pewno≈õci widoczno≈õci.
        button_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=(5, 20))
        
        # --- PRZYCISKI PO LEWEJ STRONIE ---
        
        # Kontener dla przycisk√≥w akcji (lewa strona).
        left_buttons = ttk.Frame(button_frame)
        left_buttons.pack(side=tk.LEFT)
        
        # Przycisk dodawania nowego wiersza.
        ttk.Button(
            left_buttons, 
            text="‚ûï Dodaj wiersz", 
            command=self.add_row
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        # Przycisk usuwania zaznaczonego wiersza.
        ttk.Button(
            left_buttons, 
            text="üóëÔ∏è Usu≈Ñ zaznaczony", 
            command=self.delete_row,
            style="Danger.TButton"  # Czerwony styl dla akcji destrukcyjnej
        ).pack(side=tk.LEFT, padx=5)
        
        # --- PRZYCISKI PO PRAWEJ STRONIE ---
        
        # Kontener dla przycisku zapisu (prawa strona).
        right_buttons = ttk.Frame(button_frame)
        right_buttons.pack(side=tk.RIGHT)
        
        # Przycisk zapisywania i zamykania okna.
        ttk.Button(
            right_buttons, 
            text="üíæ Zapisz i zamknij", 
            command=self.save_and_close,
            style="Accent.TButton"  # Zielony styl dla g≈Ç√≥wnej akcji
        ).pack(side=tk.RIGHT)
        
        # --- BINDOWANIE ZDARZE≈É ---
        
        # Obs≈Çuga podw√≥jnego klikniƒôcia na kom√≥rkƒô tabeli (edycja inline).
        self.tree.bind("<Double-1>", self.on_double_click)
        
        # Konfiguracja obs≈Çugi scrolla myszki dla tabeli.
        self._bind_mousewheel()

    def _bind_mousewheel(self):
        """Binduje scroll myszki do tabeli."""
        def _on_mousewheel(event):
            self.tree.yview_scroll(int(-1*(event.delta/120)), "units")
            return "break"
        
        self.tree.bind("<MouseWheel>", _on_mousewheel)
        # Dla Linuxa
        self.tree.bind("<Button-4>", lambda e: self.tree.yview_scroll(-1, "units"))
        self.tree.bind("<Button-5>", lambda e: self.tree.yview_scroll(1, "units"))

    def populate_tree(self):
        """Wype≈Çnia tabelƒô danymi demograficznymi."""
        # Czyszczenie tabeli
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        # Dodawanie wierszy
        for row in self.data:
            self.tree.insert(
                "",
                "end",
                values=(
                    row.get("rok", ""),
                    row.get("populacja_ogolem", ""),
                    row.get("katolicy", ""),
                    row.get("zydzi", ""),
                    row.get("inni", ""),
                    row.get("opis", ""),
                ),
            )

    def on_double_click(self, event):
        """
        Obs≈Çuguje edycjƒô kom√≥rki po dwukliku.
        Dla kolumny 'Opis' otwiera du≈ºe okno, dla pozosta≈Çych - ma≈Çe pole Entry.
        
        Args:
            event: Zdarzenie podw√≥jnego klikniƒôcia
        """
        item_id = self.tree.focus()
        if not item_id:
            return

        # Identyfikacja klikniƒôtej kolumny
        column = self.tree.identify_column(event.x)
        column_index = int(column.replace("#", "")) - 1  # Indeks 0-based
        current_values = list(self.tree.item(item_id)["values"])

        # Kolumna 'Opis' (indeks 5) - du≈ºe okno edycji
        if column_index == 5:
            self._open_text_popup(item_id, column_index, current_values[column_index])
            return

        # Pozosta≈Çe kolumny - inline edycja
        x, y, width, height = self.tree.bbox(item_id, column)

        entry = ttk.Entry(self.tree)
        entry.place(x=x, y=y, width=width, height=height)
        entry.insert(0, current_values[column_index])
        entry.focus_set()
        entry.select_range(0, tk.END)

        def _save_and_close(_=None):
            """Zapisuje warto≈õƒá i zamyka pole edycji."""
            current_values[column_index] = entry.get()
            self.tree.item(item_id, values=current_values)
            entry.destroy()

        entry.bind("<FocusOut>", _save_and_close)
        entry.bind("<Return>", _save_and_close)
        entry.bind("<Escape>", lambda e: entry.destroy())

    def _open_text_popup(self, item_id, col_idx, initial_text):
        """
        Otwiera du≈ºe okno do edycji d≈Çugiego tekstu (kolumna Opis).
        
        Args:
            item_id: ID wiersza w tabeli
            col_idx: Indeks kolumny
            initial_text: PoczƒÖtkowy tekst
        """
        popup = tk.Toplevel(self)
        popup.title("Edytuj opis")
        popup.transient(self)
        popup.grab_set()

        # Rozmiar 60% ekranu
        sw, sh = popup.winfo_screenwidth(), popup.winfo_screenheight()
        w, h = int(sw * 0.6), int(sh * 0.6)
        popup.geometry(f"{w}x{h}+{(sw-w)//2}+{(sh-h)//2}")

        # Pole tekstowe
        big_font = ("Segoe UI", tkfont.nametofont("TkTextFont").cget("size") + 2)
        txt = scrolledtext.ScrolledText(
            popup, wrap=tk.WORD, font=big_font, relief=tk.SOLID, borderwidth=1
        )
        txt.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        txt.insert("1.0", initial_text)
        txt.focus_set()

        # Przyciski
        btn_bar = ttk.Frame(popup)
        btn_bar.pack(fill=tk.X, pady=(0, 10), padx=10)

        def _save():
            """Zapisuje zmiany do tabeli."""
            new_text = txt.get("1.0", tk.END).rstrip()
            values = list(self.tree.item(item_id)["values"])
            values[col_idx] = new_text
            self.tree.item(item_id, values=values)
            popup.destroy()

        ttk.Button(btn_bar, text="Zapisz", style="Accent.TButton", command=_save).pack(
            side=tk.RIGHT, padx=5
        )
        ttk.Button(btn_bar, text="Anuluj", command=popup.destroy).pack(side=tk.RIGHT)

    def add_row(self):
        """Dodaje pusty wiersz do tabeli."""
        self.tree.insert("", "end", values=("", "", "", "", "", ""))
        # Przewi≈Ñ do nowego wiersza
        children = self.tree.get_children()
        if children:
            self.tree.see(children[-1])
            self.tree.selection_set(children[-1])

    def delete_row(self):
        """Usuwa zaznaczony wiersz z tabeli."""
        selected_item = self.tree.selection()
        if selected_item:
            if messagebox.askyesno("Potwierdzenie", "Czy na pewno chcesz usunƒÖƒá zaznaczony wiersz?", parent=self):
                self.tree.delete(selected_item)

    def save_and_close(self):
        """
        Zapisuje dane z tabeli do pliku JSON i zamyka okno.
        Waliduje poprawno≈õƒá danych numerycznych.
        """
        new_data = []
        
        # Zbieranie danych z tabeli
        for item_id in self.tree.get_children():
            values = self.tree.item(item_id)["values"]

            # Pomijanie ca≈Çkowicie pustych wierszy
            if not any(str(v).strip() for v in values):
                continue

            try:
                # Funkcja pomocnicza do bezpiecznej konwersji
                def to_int_or_none(value):
                    """Konwertuje warto≈õƒá na int lub None."""
                    if isinstance(value, str) and value.strip() == "":
                        return None
                    if value is None:
                        return None
                    return int(value)

                # Tworzenie wpisu demograficznego
                new_data.append(
                    {
                        "rok": to_int_or_none(values[0]),
                        "populacja_ogolem": to_int_or_none(values[1]),
                        "katolicy": to_int_or_none(values[2]),
                        "zydzi": to_int_or_none(values[3]),
                        "inni": to_int_or_none(values[4]),
                        "opis": str(values[5]) if values[5] else "",
                    }
                )
            except (ValueError, IndexError):
                messagebox.showerror(
                    "B≈ÇƒÖd Danych",
                    "Upewnij siƒô, ≈ºe w kolumnach numerycznych znajdujƒÖ siƒô tylko liczby.",
                    parent=self
                )
                return

        self.data = new_data
        self.save_data()

# --- KLASA MENED≈ªERA KOPII ZAPASOWYCH ---

class BackupManagerWindow(tk.Toplevel):
    """
    Okno do zarzƒÖdzania kopiami zapasowymi.
    Umo≈ºliwia tworzenie, przywracanie i usuwanie kopii ZIP
    zawierajƒÖcych dane JSON oraz wszystkie skany.
    """
    
    def __init__(self, parent):
        """
        Inicjalizacja okna mened≈ºera kopii zapasowych.
        
        Args:
            parent: Okno rodzica (g≈Ç√≥wna aplikacja)
        """
        super().__init__(parent)
        self.transient(parent)
        self.grab_set()
        self.title("Mened≈ºer Kopii Zapasowych (Dane + Skany)")

        self.parent = parent
        self.selected_backup_file = None

        self._center_or_maximize()
        self.create_widgets()
        self.populate_backup_list()

    def _center_or_maximize(self):
        """Maksymalizuje okno na Windows lub centruje na innych systemach."""
        sw, sh = self.winfo_screenwidth(), self.winfo_screenheight()
        if platform.system() == "Windows":
            self.state("zoomed")
            self.geometry(f"{int(sw*0.9)}x{int(sh*0.9)}+{int(sw*0.05)}+{int(sh*0.05)}")
        else:
            w, h = 800, 600
            self.geometry(f"{w}x{h}+{(sw - w)//2}+{(sh - h)//2}")
        self.minsize(600, 400)

    def create_widgets(self):
        """Tworzy interfejs u≈ºytkownika mened≈ºera kopii."""
        main_frame = ttk.Frame(self, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        main_frame.rowconfigure(1, weight=1)
        main_frame.columnconfigure(0, weight=1)

        # --- PASEK G√ìRNY ---
        
        top_bar = ttk.Frame(main_frame)
        top_bar.grid(row=0, column=0, sticky="ew", pady=(0, 10))

        ttk.Button(
            top_bar,
            text="Stw√≥rz nowƒÖ kompletnƒÖ kopiƒô (ZIP)",
            command=self.create_backup,
            style="Accent.TButton",
        ).pack(side=tk.LEFT)
        
        ttk.Label(top_bar, text="Kopie .zip zawierajƒÖ dane i wszystkie skany").pack(
            side=tk.RIGHT, padx=10
        )

        # --- LISTA KOPII ZAPASOWYCH ---
        
        list_frame = ttk.LabelFrame(
            main_frame, text="Dostƒôpne kopie zapasowe (od najnowszej)", padding="10"
        )
        list_frame.grid(row=1, column=0, sticky="nsew")
        list_frame.rowconfigure(0, weight=1)
        list_frame.columnconfigure(0, weight=1)

        self.tree = ttk.Treeview(list_frame, columns=("filename",), show="headings")
        self.tree.heading("filename", text="Nazwa Pliku Kopii Zapasowej (.zip)")
        self.tree.pack(fill=tk.BOTH, expand=True)
        self.tree.bind("<<TreeviewSelect>>", self.on_select)

        # --- PASEK AKCJI ---
        
        EXTRA_BOTTOM_MARGIN = 60
        action_bar = ttk.Frame(main_frame, padding=(0, 10, 0, EXTRA_BOTTOM_MARGIN))
        action_bar.grid(row=2, column=0, sticky="ew")

        self.selected_label = ttk.Label(
            action_bar, text="Nic nie zaznaczono", anchor="w"
        )
        self.selected_label.pack(side=tk.LEFT, expand=True, fill=tk.X)
        
        self.restore_btn = ttk.Button(
            action_bar, text="Przywr√≥ƒá", command=self.restore_backup, state=tk.DISABLED
        )
        self.restore_btn.pack(side=tk.RIGHT, padx=5)
        
        self.delete_btn = ttk.Button(
            action_bar,
            text="Usu≈Ñ",
            style="Danger.TButton",
            command=self.delete_backup,
            state=tk.DISABLED,
        )
        self.delete_btn.pack(side=tk.RIGHT)

    def populate_backup_list(self):
        """
        Wyszukuje i wy≈õwietla wszystkie dostƒôpne kopie zapasowe.
        Sortuje pliki od najnowszych.
        """
        # Czyszczenie listy.
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        try:
            # Wyszukiwanie plik√≥w backup_*.zip.
            files = [
                f
                for f in os.listdir(BACKUP_FOLDER)
                if f.startswith("backup_") and f.endswith(".zip")
            ]
            files.sort(reverse=True)  # Od najnowszych

            # Dodawanie do listy.
            for filename in files:
                self.tree.insert("", "end", iid=filename, values=(filename,))
                
        except FileNotFoundError:
            ttk.Label(self.tree, text="Folder backup nie istnieje.").pack()
            
        self.on_select()  # Od≈õwie≈ºenie stanu przycisk√≥w

    def on_select(self, event=None):
        """
        Aktualizuje panel akcji po zaznaczeniu elementu na li≈õcie.
        
        Args:
            event: Zdarzenie zmiany zaznaczenia (opcjonalne)
        """
        selected_items = self.tree.selection()
        
        if selected_items:
            self.selected_backup_file = selected_items[0]
            self.selected_label.config(text=f"Zaznaczono: {self.selected_backup_file}")
            self.restore_btn.config(state=tk.NORMAL)
            self.delete_btn.config(state=tk.NORMAL)
        else:
            self.selected_backup_file = None
            self.selected_label.config(text="Nic nie zaznaczono")
            self.restore_btn.config(state=tk.DISABLED)
            self.delete_btn.config(state=tk.DISABLED)

    def create_backup(self):
        """
        Tworzy kompletnƒÖ kopiƒô zapasowƒÖ w formacie ZIP.
        Uruchamia proces w osobnym wƒÖtku z paskiem postƒôpu.
        """
        if not os.path.exists(JSON_FILE_PATH):
            messagebox.showwarning(
                "Brak pliku",
                "Nie mo≈ºna utworzyƒá kopii, poniewa≈º plik roboczy nie istnieje.",
                parent=self,
            )
            return

        # --- OKNO Z PASKIEM POSTƒòPU ---
        
        progress_window = tk.Toplevel(self)
        progress_window.title("Tworzenie kopii zapasowej")
        progress_window.transient(self)
        progress_window.grab_set()

        # Pozycjonowanie okna postƒôpu.
        self.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - 400) // 2
        y = self.winfo_y() + (self.winfo_height() - 150) // 2
        progress_window.geometry(f"400x180+{x}+{y}")
        progress_window.resizable(False, False)

        # Elementy interfejsu.
        ttk.Label(
            progress_window,
            text="Przygotowywanie plik√≥w...",
            font=("Segoe UI", 11),
            padding=10,
        ).pack(pady=(15, 5))
        
        progress_bar = ttk.Progressbar(
            progress_window, orient="horizontal", length=360, mode="determinate"
        )
        progress_bar.pack(pady=5, padx=20)
        
        status_label = ttk.Label(
            progress_window, text="", padding=5, wraplength=350
        )
        status_label.pack(pady=(5, 10))

        # --- FUNKCJA WƒÑTKU TWORZENIA KOPII ---
        
        def backup_thread_func():
            """Funkcja wykonywana w osobnym wƒÖtku - tworzy archiwum ZIP."""
            try:
                from datetime import datetime

                # Przygotowanie ≈õcie≈ºek.
                protokoly_path = os.path.join(script_dir, "..", "assets", "protokoly")
                files_to_backup = [JSON_FILE_PATH]
                
                if os.path.exists(DEMOGRAFIA_JSON_PATH):
                    files_to_backup.append(DEMOGRAFIA_JSON_PATH)

                # Zbieranie wszystkich plik√≥w skan√≥w.
                scan_files = []
                if os.path.exists(protokoly_path):
                    for root, _, files in os.walk(protokoly_path):
                        for file in files:
                            scan_files.append(os.path.join(root, file))

                # Konfiguracja paska postƒôpu.
                total_steps = len(files_to_backup) + len(scan_files)
                progress_bar["maximum"] = total_steps

                # Generowanie nazwy pliku z datƒÖ i czasem.
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_path = os.path.join(BACKUP_FOLDER, f"backup_{timestamp}.zip")

                # Tworzenie archiwum ZIP.
                with zipfile.ZipFile(backup_path, "w", zipfile.ZIP_DEFLATED) as zf:
                    # Archiwizacja plik√≥w JSON.
                    for i, file_path in enumerate(files_to_backup):
                        arcname = os.path.basename(file_path)
                        status_label.config(text=f"Archiwizujƒô: {arcname}")
                        zf.write(file_path, arcname=arcname)
                        progress_bar["value"] = i + 1
                        self.update_idletasks()

                    # Archiwizacja skan√≥w.
                    for i, file_path in enumerate(scan_files):
                        arcname = os.path.join(
                            "assets",
                            "protokoly",
                            os.path.relpath(file_path, protokoly_path),
                        )
                        # Aktualizacja co 10 plik√≥w dla wydajno≈õci.
                        if (i % 10 == 0) or (i == len(scan_files) - 1):
                            status_label.config(
                                text=f"Archiwizujƒô skany: {i+1}/{len(scan_files)}"
                            )
                        zf.write(file_path, arcname)
                        progress_bar["value"] = len(files_to_backup) + i + 1
                        self.update_idletasks()

                # Oznaczenie sukcesu.
                progress_window.success = True
                progress_window.backup_name = os.path.basename(backup_path)

            except Exception as e:
                progress_window.success = False
                progress_window.error_message = str(e)
            finally:
                # Zamkniƒôcie okna postƒôpu.
                self.after(100, progress_window.destroy)

        # Ustawienie flag domy≈õlnych.
        progress_window.success = None
        progress_window.error_message = ""
        progress_window.backup_name = ""

        # Uruchomienie wƒÖtku.
        backup_thread = threading.Thread(target=backup_thread_func, daemon=True)
        backup_thread.start()

        # Oczekiwanie na zako≈Ñczenie.
        self.wait_window(progress_window)

        # --- OBS≈ÅUGA WYNIK√ìW ---
        
        if hasattr(progress_window, "success") and progress_window.success:
            messagebox.showinfo(
                "Sukces",
                f"Utworzono kompletnƒÖ kopiƒô zapasowƒÖ:\n{progress_window.backup_name}",
                parent=self,
            )
            self.populate_backup_list()
        elif (
            hasattr(progress_window, "error_message") and progress_window.error_message
        ):
            messagebox.showerror(
                "B≈ÇƒÖd",
                f"Nie uda≈Ço siƒô utworzyƒá kopii:\n{progress_window.error_message}",
                parent=self,
            )

        self.on_select()

    def restore_backup(self):
        """
        Przywraca kompletnƒÖ kopiƒô zapasowƒÖ z pliku ZIP.
        UWAGA: Operacja nieodwracalna - nadpisuje obecne dane!
        """
        if not self.selected_backup_file:
            return

        filename = self.selected_backup_file
        
        # Ostrze≈ºenie dla u≈ºytkownika.
        msg = (
            "UWAGA! Ta operacja jest NIEODWRACALNA.\n\n"
            f"Czy na pewno chcesz przywr√≥ciƒá kopiƒô '{filename}'?\n\n"
            "Spowoduje to:\n"
            "1. NADPISANIE plik√≥w JSON z danymi.\n"
            "2. CA≈ÅKOWITE USUNIƒòCIE obecnego folderu ze skanami i zastƒÖpienie go wersjƒÖ z kopii."
        )

        if messagebox.askyesno(
            "POTWIERDZENIE KRYTYCZNEJ OPERACJI", msg, icon="warning", parent=self
        ):
            backup_zip_path = os.path.join(BACKUP_FOLDER, filename)
            temp_restore_path = os.path.join(BACKUP_FOLDER, "_temp_restore")

            self.selected_label.config(text="Przywracanie kopii, proszƒô czekaƒá...")
            self.update_idletasks()

            success = False
            try:
                # Przygotowanie folderu tymczasowego.
                if os.path.exists(temp_restore_path):
                    shutil.rmtree(temp_restore_path)
                os.makedirs(temp_restore_path)
                
                # Rozpakowanie archiwum.
                with zipfile.ZipFile(backup_zip_path, "r") as zf:
                    zf.extractall(temp_restore_path)

                # Sprawdzenie kompletno≈õci archiwum.
                temp_json_owner = os.path.join(
                    temp_restore_path, "owner_data_to_import.json"
                )
                temp_protokoly = os.path.join(temp_restore_path, "assets", "protokoly")
                
                if not os.path.exists(temp_json_owner) or not os.path.exists(
                    temp_protokoly
                ):
                    raise FileNotFoundError(
                        "Archiwum ZIP jest niekompletne."
                    )

                # Usuniƒôcie obecnych danych.
                protokoly_path = os.path.join(script_dir, "..", "assets", "protokoly")
                if os.path.exists(protokoly_path):
                    shutil.rmtree(protokoly_path)

                # Przywr√≥cenie danych z kopii.
                shutil.move(temp_protokoly, os.path.join(script_dir, "..", "assets"))
                shutil.move(temp_json_owner, JSON_FILE_PATH)

                # Przywr√≥cenie danych demograficznych (je≈õli istniejƒÖ).
                temp_json_demo = os.path.join(temp_restore_path, "demografia.json")
                if os.path.exists(temp_json_demo):
                    shutil.move(temp_json_demo, DEMOGRAFIA_JSON_PATH)
                    print("Przywr√≥cono dane demograficzne.")

                messagebox.showinfo(
                    "Sukces",
                    "Kopia zapasowa zosta≈Ça przywr√≥cona.\nDane w edytorze zostanƒÖ prze≈Çadowane.",
                    parent=self,
                )
                
                # Prze≈Çadowanie danych w g≈Ç√≥wnym oknie.
                self.parent.load_from_json()

                success = True
                self.destroy()
                
            except Exception as e:
                messagebox.showerror(
                    "B≈ÇƒÖd przywracania", f"WystƒÖpi≈Ç krytyczny b≈ÇƒÖd: {e}", parent=self
                )
            finally:
                # Czyszczenie folderu tymczasowego.
                if os.path.exists(temp_restore_path):
                    shutil.rmtree(temp_restore_path)
                if not success:
                    self.populate_backup_list()

    def delete_backup(self):
        """
        Trwale usuwa wybrany plik kopii zapasowej.
        Wymaga potwierdzenia u≈ºytkownika.
        """
        if not self.selected_backup_file:
            return

        filename = self.selected_backup_file
        
        if messagebox.askyesno(
            "Potwierdzenie usuniƒôcia",
            f"Czy na pewno chcesz trwale usunƒÖƒá plik kopii zapasowej:\n\n{filename}?",
            parent=self,
        ):
            backup_path = os.path.join(BACKUP_FOLDER, filename)
            try:
                os.remove(backup_path)
                self.populate_backup_list()
            except Exception as e:
                messagebox.showerror(
                    "B≈ÇƒÖd", f"Nie uda≈Ço siƒô usunƒÖƒá pliku: {e}", parent=self
                )

# --- PUNKT WEJ≈öCIA PROGRAMU ---

if __name__ == "__main__":
    """
    G≈Ç√≥wny punkt wej≈õcia aplikacji.
    Tworzy instancjƒô g≈Ç√≥wnego okna i uruchamia pƒôtlƒô zdarze≈Ñ.
    """
    app = OwnerEditorApp()
    app.mainloop()
